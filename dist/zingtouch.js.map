{"version":3,"sources":["webpack:///webpack/bootstrap 0a2848d2318538dd1729","webpack:///./src/core/main.js","webpack:///./src/ZingTouch.js","webpack:///./src/core/classes/Region.js","webpack:///./src/core/classes/Binder.js","webpack:///./src/gestures/Gesture.js","webpack:///./src/core/util.js","webpack:///./src/core/arbiter.js","webpack:///./src/core/dispatcher.js","webpack:///./src/core/interpreter.js","webpack:///./src/core/classes/State.js","webpack:///./src/gestures/Pan.js","webpack:///./src/gestures/Distance.js","webpack:///./src/gestures/Rotate.js","webpack:///./src/gestures/Swipe.js","webpack:///./src/gestures/Tap.js","webpack:///./src/core/classes/Binding.js","webpack:///./src/core/classes/Input.js","webpack:///./src/core/classes/ZingEvent.js"],"names":["window","ZingTouch","_regions","Gesture","Pan","Distance","Rotate","Swipe","Tap","Region","element","capture","preventDefault","id","length","region","push","state","State","eventNames","PointerEvent","TouchEvent","forEach","name","addEventListener","e","gesture","handler","bindOnce","tagName","Binder","addBinding","bind","bindings","retrieveBindingsByElement","unbound","binding","registeredGestures","registeredGesture","removeEventListener","getId","key","Error","setType","registerGesture","getType","Object","keys","type","object","inputs","every","util","isInside","input","initial","x","y","CIRCLE_DEGREES","HALF_CIRCLE_DEGREES","normalizeEvent","freeze","mousedown","touchstart","pointerdown","mousemove","touchmove","pointermove","mouseup","touchend","pointerup","isWithin","currentX","currentY","previousX","previousY","tolerance","Math","abs","distanceBetweenTwoPoints","x0","x1","y0","y1","dist","sqrt","round","getMidpoint","getAngle","originX","originY","projectionX","projectionY","angle","atan2","PI","getAngularDistance","start","end","sign","getVelocity","startX","startY","startTime","endX","endY","endTime","distance","getRightMostInput","rightMost","Number","MIN_VALUE","isInteger","value","target","rect","getBoundingClientRect","left","width","top","height","getPropagationPath","event","path","node","document","parentNode","getPathIndex","index","obj","i","setMSPreventDefault","style","removeMSPreventDefault","returnValue","arbiter","eventType","buttons","resetInputs","updateInputs","retrieveBindingsByInitialPos","toBeDispatched","gestures","data","events","endCount","getCurrentEventType","dispatcher","newEvent","CustomEvent","detail","bubbles","cancelable","emitEvent","dispatchEvent","unbind","interpreter","evType","map","current","candidates","reduce","accumulator","DEFAULT_MOUSE_ID","regionId","numGestures","boundGesture","indexOf","assignGestureId","Binding","filter","b","some","regionElement","touches","pointerType","Array","from","changedTouches","update","touch","identifier","pointerId","findInputById","Input","endType","setId","find","DEFAULT_INPUTS","DEFAULT_MIN_THRESHOLD","options","numInputs","threshold","progress","getGestureProgress","active","lastEmitted","output","distanceFromLastEmit","reachedThreshold","packData","distanceFromOrigin","directionFromOrigin","currentDirection","change","isValid","lastEmittedDistance","numActiveInputs","currentDistance","centerPoint","center","currentPivot","initialPivot","bRect","currentAngle","initialAngle","previousAngle","distanceFromLast","DEFAULT_MAX_REST_TIME","DEFAULT_ESCAPE_VELOCITY","DEFAULT_TIME_DISTORTION","DEFAULT_MAX_PROGRESS_STACK","maxRestTime","escapeVelocity","timeDistortion","maxProgressStack","moves","time","Date","getTime","shift","currentMove","pop","lastMove","velocity","duration","DEFAULT_MIN_DELAY_MS","DEFAULT_MAX_DELAY_MS","DEFAULT_MOVE_PX_TOLERANCE","minDelay","maxDelay","previous","resetProgress","MAX_VALUE","interval","currentEvent","ZingEvent","touchIdentifier","INITIAL_COORDINATE","originalEvent","eventObj","t","clientX","clientY","pageX","pageY","screenX","screenY"],"mappings":"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","file":"/Users/mschultz/zingtouch/dist/zingtouch.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0a2848d2318538dd1729","/**\n * @file main.js\n * Main file to setup event listeners on the document,\n * and to expose the ZingTouch object\n */\n\nimport ZingTouch from './../ZingTouch.js';\nwindow.ZingTouch = ZingTouch;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/main.js","/**\n * @file ZingTouch.js\n * Main object containing API methods and Gesture constructors\n */\n\nimport Region from './core/classes/Region.js';\nimport Gesture from './gestures/Gesture.js';\nimport Pan from './gestures/Pan.js';\nimport Distance from './gestures/Distance.js';\nimport Rotate from './gestures/Rotate.js';\nimport Swipe from './gestures/Swipe.js';\nimport Tap from './gestures/Tap.js';\n\n/**\n * The global API interface for ZingTouch. Contains a constructor for the\n * Region Object, and constructors for each predefined Gesture.\n * @type {Object}\n * @namespace ZingTouch\n */\nlet ZingTouch = {\n  _regions: [],\n\n  // Constructors\n  Gesture,\n  Pan,\n  Distance,\n  Rotate,\n  Swipe,\n  Tap,\n  Region: function(element, capture, preventDefault) {\n    let id = ZingTouch._regions.length;\n    let region = new Region(element, capture, preventDefault, id);\n    ZingTouch._regions.push(region);\n    return region;\n  },\n};\n\nexport default ZingTouch;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ZingTouch.js","/**\n * @file Region.js\n */\n\nimport Binder from './Binder.js';\nimport Gesture from './../../gestures/Gesture.js';\nimport arbiter from './../arbiter.js';\nimport State from './State.js';\n\n/**\n * Allows the user to specify a region to capture all events to feed ZingTouch\n * into. This can be as narrow as the element itself, or as big as the document\n * itself. The more specific an area, the better performant the overall\n * application will perform. Contains API methods to bind/unbind specific\n * elements to corresponding gestures. Also contains the ability to\n * register/unregister new gestures.\n * @class Region\n */\nclass Region {\n\n  /**\n   * Constructor function for the Region class.\n   * @param {Element} element - The element to capture all\n   *  window events in that region to feed into ZingTouch.\n   * @param {boolean} [capture=false] - Whether the region listens for\n   *  captures or bubbles.\n   * @param {boolean} [preventDefault=true] - Whether the default browser\n   *  functionality should be disabled;\n   * @param {Number} id - The id of the region, assigned by the ZingTouch object\n   */\n  constructor(element, capture, preventDefault, id) {\n    /**\n     * The identifier for the Region. This is assigned by the ZingTouch object\n     * and is used to hash gesture id for uniqueness.\n     * @type {Number}\n     */\n    this.id = id;\n\n    /**\n     * The element being bound to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     * @type {boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * Boolean to disable browser functionality such as scrolling and zooming\n     * over the region\n     * @type {boolean}\n     */\n    this.preventDefault = (typeof preventDefault !== 'undefined') ?\n      preventDefault : true;\n\n    /**\n     * The internal state object for a Region.\n     * Keeps track of registered gestures, inputs, and events.\n     * @type {State}\n     */\n    this.state = new State(id);\n\n    let eventNames = [];\n    if (window.PointerEvent && !window.TouchEvent) {\n      eventNames = [\n        'pointerdown',\n        'pointermove',\n        'pointerup',\n      ];\n    } else {\n      eventNames = [\n        'mousedown',\n        'mousemove',\n        'mouseup',\n        'touchstart',\n        'touchmove',\n        'touchend',\n      ];\n    }\n\n    // Bind detected browser events to the region element.\n    eventNames.forEach((name) => {\n      element.addEventListener(name, (e) => {\n        arbiter(e, this);\n      }, this.capture);\n    });\n  }\n\n  /**\n   * Bind an element to a registered/unregistered gesture with\n   * multiple function signatures.\n   * @example\n   * bind(element) - chainable\n   * @example\n   * bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} [gesture] - Gesture key, or a Gesture object.\n   * @param {Function} [handler] - The function to execute when an event is\n   *  emitted.\n   * @param {Boolean} [capture] - capture/bubble\n   * @param {Boolean} [bindOnce = false] - Option to bind once and\n   *  only emit the event once.\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bind(element, gesture, handler, capture, bindOnce) {\n    if (!element || (element && !element.tagName)) {\n      throw 'Bind must contain an element';\n    }\n\n    bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n    if (!gesture) {\n      return new Binder(element, bindOnce, this.state);\n    } else {\n      this.state.addBinding(element, gesture, handler, capture, bindOnce);\n    }\n  }\n\n  /**\n   * Bind an element and sets up actions to remove the binding once\n   * it has been emitted for the first time.\n   * 1. bind(element) - chainable\n   * 2. bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} gesture - Gesture key, or a Gesture object.\n   * @param {Function} handler - The function to execute when an\n   *  event is emitted.\n   * @param {Boolean} capture - capture/bubble\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bindOnce(element, gesture, handler, capture) {\n    this.bind(element, gesture, handler, capture, true);\n  }\n\n  /**\n   * Unbinds an element from either the specified gesture\n   *  or all if no element is specified.\n   * @param {Element} element -The element to remove.\n   * @param {String | Object} [gesture] - A String representing the gesture,\n   *   or the actual object being used.\n   * @return {Array} - An array of Bindings that were unbound to the element;\n   */\n  unbind(element, gesture) {\n    let bindings = this.state.retrieveBindingsByElement(element);\n    let unbound = [];\n\n    bindings.forEach((binding) => {\n      if (gesture) {\n        if (typeof gesture === 'string' &&\n          this.state.registeredGestures[gesture]) {\n          let registeredGesture = this.state.registeredGestures[gesture];\n          if (registeredGesture.id === binding.gesture.id) {\n            element.removeEventListener(\n              binding.gesture.getId(),\n              binding.handler, binding.capture);\n            unbound.push(binding);\n          }\n        }\n      } else {\n        element.removeEventListener(\n          binding.gesture.getId(),\n          binding.handler,\n          binding.capture);\n        unbound.push(binding);\n      }\n    });\n\n    return unbound;\n  }\n\n  /* unbind*/\n\n  /**\n   * Registers a new gesture with an assigned key\n   * @param {String} key - The key used to register an element to that gesture\n   * @param {Gesture} gesture - A gesture object\n   */\n  register(key, gesture) {\n    if (typeof key !== 'string') {\n      throw new Error('Parameter key is an invalid string');\n    }\n\n    if (!gesture instanceof Gesture) {\n      throw new Error('Parameter gesture is an invalid Gesture object');\n    }\n\n    gesture.setType(key);\n    this.state.registerGesture(gesture, key);\n  }\n\n  /* register*/\n\n  /**\n   * Un-registers a gesture from the Region's state such that\n   * it is no longer emittable.\n   * Unbinds all events that were registered with the type.\n   * @param {String|Object} key - Gesture key that was used to\n   *  register the object\n   * @return {Object} - The Gesture object that was unregistered\n   *  or null if it could not be found.\n   */\n  unregister(key) {\n    this.state.bindings.forEach((binding) => {\n      if (binding.gesture.getType() === key) {\n        binding.element.removeEventListener(binding.gesture.getId(),\n          binding.handler, binding.capture);\n      }\n    });\n\n    let registeredGesture = this.state.registeredGestures[key];\n    delete this.state.registeredGestures[key];\n    return registeredGesture;\n  }\n}\n\nexport default Region;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Region.js","/**\n * @file Binder.js\n */\n\n/**\n * A chainable object that contains a single element to be bound upon.\n * Called from ZingTouch.bind(), and is used to chain over gesture callbacks.\n * @class\n */\nclass Binder {\n  /**\n   * Constructor function for the Binder class.\n   * @param {Element} element - The element to bind gestures to.\n   * @param {Boolean} bindOnce - Option to bind once and only emit\n   * the event once.\n   * @param {Object} state - The state of the Region that is being bound to.\n   * @return {Object} - Returns 'this' to be chained over and over again.\n   */\n  constructor(element, bindOnce, state) {\n    /**\n     * The element to bind gestures to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    Object.keys(state.registeredGestures).forEach((key) => {\n      this[key] = (handler, capture) => {\n        state.addBinding(this.element, key, handler, capture, bindOnce);\n        return this;\n      };\n    });\n  }\n\n}\n\nexport default Binder;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Binder.js","/**\n * @file Gesture.js\n * Contains the Gesture class\n */\n\nimport util from './../core/util.js';\n\n/**\n * The Gesture class that all gestures inherit from.\n */\nclass Gesture {\n  /**\n   * Constructor function for the Gesture class.\n   * @class Gesture\n   */\n  constructor() {\n    /**\n     * The generic string type of gesture ('expand'|'distance'|\n     *  'rotate'|'swipe'|'tap').\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * The unique identifier for each gesture determined at bind time by the\n     * state object. This allows for distinctions across instance variables of\n     * Gestures that are created on the fly (e.g. Tap-1, Tap-2, etc).\n     * @type {String|null}\n     */\n    this.id = null;\n  }\n\n  /**\n   * Set the type of the gesture to be called during an event\n   * @param {String} type - The unique identifier of the gesture being created.\n   */\n  setType(type) {\n    this.type = type;\n  }\n\n  /**\n   * getType() - Returns the generic type of the gesture\n   * @return {String} - The type of gesture\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Set the id of the gesture to be called during an event\n   * @param {String} id - The unique identifier of the gesture being created.\n   */\n  setId(id) {\n    this.id = id;\n  }\n\n  /**\n   * Return the id of the event. If the id does not exist, return the type.\n   * @return {String}\n   */\n  getId() {\n    return (this.id !== null) ? this.id : this.type;\n  }\n\n  /**\n   * Updates internal properties with new ones, only if the properties exist.\n   * @param {Object} object\n   */\n  update(object) {\n    Object.keys(object).forEach( key => {\n      this[key] = object[key];\n    });\n  }\n\n  /**\n   * start() - Event hook for the start of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n\t * @param {Object} state - The state object of the current region.\n\t * @param {Element} element - The element associated to the binding.\n   * @return {null|Object}  - Default of null\n   */\n  start(inputs, state, element) {\n    return null;\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null|Object} - Default of null\n   */\n  move(inputs, state, element) {\n    return null;\n  }\n\n  /**\n   * end() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object}  - Default of null\n   */\n  end(inputs) {\n    return null;\n  }\n\n\t/**\n\t* isValid() - Pre-checks to ensure the invariants of a gesture are satisfied.\n\t* @param {Array} inputs - The array of Inputs on the screen\n\t* @param {Object} state - The state object of the current region.\n\t* @param {Element} element - The element associated to the binding.\n\t* @return {boolean} - If the gesture is valid\n\t*/\n\tisValid(inputs, state, element) {\n    return inputs.every( input => {\n        return util.isInside(input.initial.x, input.initial.y, element);\n    });\n  }\n\n}\n\nexport default Gesture;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Gesture.js","/**\n * @file util.js\n * Various accessor and mutator functions to handle state and validation.\n */\n\nconst CIRCLE_DEGREES = 360;\nconst HALF_CIRCLE_DEGREES = 180;\n\n/**\n *  Contains generic helper functions\n * @type {Object}\n * @namespace util\n */\nlet util = {\n\n  /**\n   * Normalizes window events to be either of type start, move, or end.\n   * @param {String} type - The event type emitted by the browser\n   * @return {null|String} - The normalized event, or null if it is an\n   * event not predetermined.\n   */\n  normalizeEvent: Object.freeze({\n      mousedown:   'start',\n      touchstart:  'start',\n      pointerdown: 'start',\n\n      mousemove:   'move',\n      touchmove:   'move',\n      pointermove: 'move',\n\n      mouseup:   'end',\n      touchend:  'end',\n      pointerup: 'end',\n  }),\n  /* normalizeEvent*/\n\n  /**\n   * Determines if the current and previous coordinates are within or\n   * up to a certain tolerance.\n   * @param {Number} currentX - Current event's x coordinate\n   * @param {Number} currentY - Current event's y coordinate\n   * @param {Number} previousX - Previous event's x coordinate\n   * @param {Number} previousY - Previous event's y coordinate\n   * @param {Number} tolerance - The tolerance in pixel value.\n   * @return {boolean} - true if the current coordinates are\n   * within the tolerance, false otherwise\n   */\n  isWithin(currentX, currentY, previousX, previousY, tolerance) {\n    return ((Math.abs(currentY - previousY) <= tolerance) &&\n    (Math.abs(currentX - previousX) <= tolerance));\n  },\n  /* isWithin*/\n\n  /**\n   * Calculates the distance between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {number} The numerical value between two points\n   */\n  distanceBetweenTwoPoints(x0, x1, y0, y1) {\n    let dist = (Math.sqrt(((x1 - x0) * (x1 - x0)) + ((y1 - y0) * (y1 - y0))));\n    return Math.round(dist * 100) / 100;\n  },\n\n  /**\n   * Calculates the midpoint coordinates between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {Object} The coordinates of the midpoint.\n   */\n  getMidpoint(x0, x1, y0, y1) {\n    return {\n      x: ((x0 + x1) / 2),\n      y: ((y0 + y1) / 2),\n    };\n  },\n  /**\n   * Calculates the angle between the projection and an origin point.\n   *   |                (projectionX,projectionY)\n   *   |             /°\n   *   |          /\n   *   |       /\n   *   |    / θ\n   *   | /__________\n   *   ° (originX, originY)\n   * @param {number} originX\n   * @param {number} originY\n   * @param {number} projectionX\n   * @param {number} projectionY\n   * @return {number} - Degree along the unit circle where the project lies\n   */\n  getAngle(originX, originY, projectionX, projectionY) {\n    let angle = Math.atan2(projectionY - originY, projectionX - originX) *\n      ((HALF_CIRCLE_DEGREES) / Math.PI);\n    return CIRCLE_DEGREES - ((angle < 0) ? (CIRCLE_DEGREES + angle) : angle);\n  },\n  /**\n   * Calculates the angular distance in degrees between two angles\n   *  along the unit circle\n   * @param {number} start - The starting point in degrees\n   * @param {number} end - The ending point in degrees\n   * @return {number} The number of degrees between the\n   * starting point and ending point. Negative degrees denote a clockwise\n   * direction, and positive a counter-clockwise direction.\n   */\n  getAngularDistance(start, end) {\n    let angle = (end - start) % CIRCLE_DEGREES;\n    let sign = (angle < 0) ? 1 : -1;\n    angle = Math.abs(angle);\n    return (angle > HALF_CIRCLE_DEGREES) ?\n    sign * (CIRCLE_DEGREES - angle) : sign * angle;\n  },\n\n  /**\n   * Calculates the velocity of pixel/milliseconds between two points\n   * @param {Number} startX\n   * @param {Number} startY\n   * @param {Number} startTime\n   * @param {Number} endX\n   * @param {Number} endY\n   * @param {Number} endTime\n   * @return {Number} velocity of px/time\n   */\n  getVelocity(startX, startY, startTime, endX, endY, endTime) {\n    let distance = this.distanceBetweenTwoPoints(startX, endX, startY, endY);\n    return (distance / (endTime - startTime));\n  },\n\n  /**\n   * Returns the farthest right input\n   * @param {Array} inputs\n   * @return {Object}\n   */\n  getRightMostInput(inputs) {\n    let rightMost = null;\n    let distance = Number.MIN_VALUE;\n    inputs.forEach((input) => {\n      if (input.initial.x > distance) {\n        rightMost = input;\n      }\n    });\n    return rightMost;\n  },\n\n  /**\n   * Determines is the value is an integer and not a floating point\n   * @param {Mixed} value\n   * @return {boolean}\n   */\n  isInteger(value) {\n    return (typeof value === 'number') && (value % 1 === 0);\n  },\n\n  /**\n   * Determines if the x,y position of the input is within then target.\n   * @param {Number} x -clientX\n   * @param {Number} y -clientY\n   * @param {Element} target\n   * @return {Boolean}\n   */\n  isInside(x, y, target) {\n    const rect = target.getBoundingClientRect();\n    return ((x > rect.left && x < rect.left + rect.width) &&\n    (y > rect.top && y < rect.top + rect.height));\n  },\n  /**\n   * Polyfill for event.propagationPath\n   * @param {Event} event\n   * @return {Array}\n   */\n  getPropagationPath(event) {\n    if (event.path) {\n      return event.path;\n    } else {\n      let path = [];\n      let node = event.target;\n      while (node != document) {\n        path.push(node);\n        node = node.parentNode;\n      }\n\n      return path;\n    }\n  },\n\n  /**\n   * Retrieve the index inside the path array\n   * @param {Array} path\n   * @param {Element} element\n   * @return {Element}\n   */\n  getPathIndex(path, element) {\n    let index = path.length;\n\n    path.forEach((obj, i) => {\n      if (obj === element) {\n        index = i;\n      }\n    });\n\n    return index;\n  },\n\n  setMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = 'none';\n    element.style['touch-action'] = 'none';\n  },\n\n  removeMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = '';\n    element.style['touch-action'] = '';\n  },\n\n  preventDefault(event) {\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n  }\n};\n\nexport default util;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util.js","/**\n * @file arbiter.js\n * Contains logic for the dispatcher\n */\n\nimport dispatcher from './dispatcher.js';\nimport interpreter from './interpreter.js';\nimport util from './util.js';\n\n/**\n * Function that handles event flow, negotiating with the interpreter,\n * and dispatcher.\n * 1. Receiving all touch events in the window.\n * 2. Determining which gestures are linked to the target element.\n * 3. Negotiating with the Interpreter what event should occur.\n * 4. Sending events to the dispatcher to emit events to the target.\n * @param {Event} event - The event emitted from the window object.\n * @param {Object} region - The region object of the current listener.\n */\nfunction arbiter(event, region) {\n  const state = region.state;\n  const eventType = util.normalizeEvent[ event.type ];\n\n  /*\n   Return if a gesture is not in progress and won't be. Also catches the case\n   where a previous event is in a partial state (2 finger pan, waits for both\n   inputs to reach touchend)\n   */\n  if (state.inputs.length === 0 && eventType !== 'start') {\n    return;\n  }\n\n  /*\n   Check for 'stale' or events that lost focus\n   (e.g. a pan goes off screen/off region.)\n   Does not affect mobile devices.\n   */\n  if (typeof event.buttons !== 'undefined' &&\n    eventType !== 'end' &&\n    event.buttons === 0) {\n    state.resetInputs();\n    return;\n  }\n\n  // Update the state with the new events. If the event is stopped, return;\n  if (!state.updateInputs(event, region.element)) {\n    return;\n  }\n\n  // Retrieve the initial target from any one of the inputs\n  const bindings = state.retrieveBindingsByInitialPos();\n  if (bindings.length > 0) {\n    if (region.preventDefault) {\n      util.setMSPreventDefault(region.element);\n      util.preventDefault(event);\n    } else {\n      util.removeMSPreventDefault(region.element);\n    }\n\n    const toBeDispatched = {};\n    const gestures = interpreter(bindings, event, state);\n\n    /* Determine the deepest path index to emit the event\n     from, to avoid duplicate events being fired. */\n\n    const path = util.getPropagationPath(event);\n    gestures.forEach((gesture) => {\n      const id = gesture.binding.gesture.getId();\n      if (toBeDispatched[id]) {\n        if (util.getPathIndex(path, gesture.binding.element) <\n          util.getPathIndex(path, toBeDispatched[id].binding.element)) {\n          toBeDispatched[id] = gesture;\n        }\n      } else {\n        toBeDispatched[id] = gesture;\n      }\n    });\n\n    Object.keys(toBeDispatched).forEach((index) => {\n      const gesture = toBeDispatched[index];\n      dispatcher(gesture.binding, gesture.data, gesture.events);\n    });\n  }\n\n  let endCount = 0;\n  state.inputs.forEach((input) => {\n    if (input.getCurrentEventType() === 'end') {\n      endCount++;\n    }\n  });\n\n  if (endCount === state.inputs.length) {\n    state.resetInputs();\n  }\n}\n\nexport default arbiter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/arbiter.js","/**\n * @file dispatcher.js\n * Contains logic for the dispatcher\n */\n\n/**\n * Emits data at the target element if available, and bubbles up from\n * the target to the parent until the document has been reached.\n * Called from the arbiter.\n * @param {Binding} binding - An object of type Binding\n * @param {Object} data - The metadata computed by the gesture being emitted.\n * @param {Array} events - An array of ZingEvents\n *  corresponding to the inputs on the screen.\n */\nfunction dispatcher(binding, data, events) {\n  data.events = events;\n\n  const newEvent = new CustomEvent(binding.gesture.getId(), {\n    detail: data,\n    bubbles: true,\n    cancelable: true,\n  });\n  emitEvent(binding.element, newEvent, binding);\n}\n\n/**\n * Emits the new event. Unbinds the event if the event was registered\n * at bindOnce.\n * @param {Element} target - Element object to emit the event to.\n * @param {Event} event - The CustomEvent to emit.\n * @param {Binding} binding - An object of type Binding\n */\nfunction emitEvent(target, event, binding) {\n  target.dispatchEvent(event);\n  if (binding.bindOnce) {\n    ZingTouch.unbind(binding.element, binding.gesture.getType());\n  }\n}\n\nexport default dispatcher;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/dispatcher.js","/**\n * @file interpreter.js\n * Contains logic for the interpreter\n */\n\nimport util from './util.js';\n\n/**\n * Receives an event and an array of Bindings (element -> gesture handler)\n * to determine what event will be emitted. Called from the arbiter.\n * @param {Array} bindings - An array containing Binding objects\n * that associate the element to an event handler.\n * @param {Object} event - The event emitted from the window.\n * @param {Object} state - The state object of the current listener.\n * @return {Object | null} - Returns an object containing a binding and\n * metadata, or null if a gesture will not be emitted.\n */\nfunction interpreter(bindings, event, state) {\n  const evType = util.normalizeEvent[ event.type ];\n  const events = state.inputs.map( input => input.current );\n\n  const candidates = bindings.reduce( (accumulator, binding) => {\n    const data = binding.gesture[evType](state.inputs, state, binding.element);\n    if (data) accumulator.push({ binding, data, events });\n    return accumulator;\n  }, []);\n\n  return candidates;\n}\n\nexport default interpreter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/interpreter.js","/**\n * @file State.js\n */\n\nimport Gesture from './../../gestures/Gesture.js';\nimport Pan from './../../gestures/Pan.js';\nimport Distance from './../../gestures/Distance.js';\nimport Rotate from './../../gestures/Rotate.js';\nimport Swipe from './../../gestures/Swipe.js';\nimport Tap from './../../gestures/Tap.js';\nimport Binding from './Binding.js';\nimport Input from './Input.js';\nimport util from './../util.js';\n\nconst DEFAULT_MOUSE_ID = 0;\n\n/**\n * Creates an object related to a Region's state,\n * and contains helper methods to update and clean up different states.\n */\nclass State {\n\n  /**\n   * Constructor for the State class.\n   * @param {String} regionId - The id the region this state is bound to.\n   */\n  constructor(regionId) {\n    /**\n     * The id for the region this state is bound to.\n     * @type {String}\n     */\n    this.regionId = regionId;\n\n    /**\n     * An array of current and recently inactive\n     *  Input objects related to a gesture.\n     * @type {Input}\n     */\n    this.inputs = [];\n\n    /**\n     * An array of Binding objects; The list of relations between elements,\n     *   their gestures, and the handlers.\n     * @type {Binding}\n     */\n    this.bindings = [];\n\n    /**\n     * The number of gestures that have been registered with this state\n     * @type {Number}\n     */\n    this.numGestures = 0;\n\n    /**\n     * A key/value map all the registered gestures for the listener.\n     *  Note: Can only have one gesture registered to one key.\n     * @type {Object}\n     */\n    this.registeredGestures = {};\n\n    this.registerGesture(new Pan(), 'pan');\n    this.registerGesture(new Rotate(), 'rotate');\n    this.registerGesture(new Distance(), 'distance');\n    this.registerGesture(new Swipe(), 'swipe');\n    this.registerGesture(new Tap(), 'tap');\n  }\n\n  /**\n   * Creates a new binding with the given element and gesture object.\n   * If the gesture object provided is unregistered, it's reference\n   * will be saved in as a binding to be later referenced.\n   * @param  {Element} element - The element the gesture is bound to.\n   * @param {String|Object} gesture  - Either a name of a registered gesture,\n   *  or an unregistered  Gesture object.\n   * @param {Function} handler - The function handler to be called\n   *  when the event is emitted. Used to bind/unbind.\n   * @param {Boolean} capture - Whether the gesture is to be\n   *  detected in the capture of bubble phase. Used to bind/unbind.\n   * @param {Boolean} bindOnce - Option to bind once and\n   *  only emit the event once.\n   */\n  addBinding(element, gesture, handler, capture, bindOnce) {\n    let boundGesture;\n\n    // Error type checking.\n    if (element && typeof element.tagName === 'undefined') {\n      throw new Error('Parameter element is an invalid object.');\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('Parameter handler is invalid.');\n    }\n\n    if (typeof gesture === 'string' &&\n      Object.keys(this.registeredGestures).indexOf(gesture) === -1) {\n      throw new Error('Parameter ' + gesture + ' is not a registered gesture');\n    } else if (typeof gesture === 'object' && !(gesture instanceof Gesture)) {\n      throw new Error('Parameter for the gesture is not of a Gesture type');\n    }\n\n    if (typeof gesture === 'string') {\n      boundGesture = this.registeredGestures[gesture];\n    } else {\n      boundGesture = gesture;\n      if (boundGesture.id === '') {\n        this.assignGestureId(boundGesture);\n      }\n    }\n\n    this.bindings.push(new Binding(element, boundGesture,\n      handler, capture, bindOnce));\n    element.addEventListener(boundGesture.getId(), handler, capture);\n  }\n\n  /**\n   * Retrieves the Binding by which an element is associated to.\n   * @param {Element} element - The element to find bindings to.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByElement(element) {\n    return this.bindings.filter( b => b.element === element );\n  }\n\n  /**\n   * Retrieves all bindings based upon the initial X/Y position of the inputs.\n   * e.g. if gesture started on the correct target element,\n   *  but diverted away into the correct region, this would still be valid.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByInitialPos() {\n    return this.bindings.filter( binding => {\n      return this.inputs.some( input => {\n        return util.isInside(input.initial.x, input.initial.y, binding.element);\n      });\n    });\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   * @param {Event} event - The event being captured.\n   * @param {Element} regionElement - The element where\n   *  this current Region is bound to.\n   * @return {boolean} - returns true for a successful update,\n   *  false if the event is invalid.\n   */\n  updateInputs(event, regionElement) {\n    let eventType = (event.touches) ?\n      'TouchEvent' : ((event.pointerType) ? 'PointerEvent' : 'MouseEvent');\n    switch (eventType) {\n      case 'TouchEvent':\n        Array.from(event.changedTouches).forEach( touch => {\n          update(event, this, touch.identifier, regionElement);\n        });\n        break;\n\n      case 'PointerEvent':\n        update(event, this, event.pointerId, regionElement);\n        break;\n\n      case 'MouseEvent':\n      default:\n        update(event, this, DEFAULT_MOUSE_ID, regionElement);\n        break;\n    }\n    return true;\n\n    function update(event, state, identifier, regionElement) {\n      const eventType = util.normalizeEvent[ event.type ];\n      const input = findInputById(state.inputs, identifier);\n\n      // A starting input was not cleaned up properly and still exists.\n      if (eventType === 'start' && input) {\n        state.resetInputs();\n        return;\n      }\n\n      // An input has moved outside the region.\n      if (eventType !== 'start' &&\n        input &&\n        !util.isInside(input.current.x, input.current.y, regionElement)) {\n         state.resetInputs();\n        return;\n      }\n\n      if (eventType !== 'start' && !input) {\n        state.resetInputs();\n        return;\n      }\n\n      if (eventType === 'start') {\n        state.inputs.push(new Input(event, identifier));\n      } else {\n        input.update(event, identifier);\n      }\n    }\n  }\n\n  /**\n   * Removes all inputs from the state, allowing for a new gesture.\n   */\n  resetInputs() {\n    this.inputs = [];\n  }\n\n  /**\n   * Counts the number of active inputs at any given time.\n   * @return {Number} - The number of active inputs.\n   */\n  numActiveInputs() {\n    const endType = this.inputs.filter((input) => {\n      return input.current.type !== 'end';\n    });\n    return endType.length;\n  }\n\n  /**\n   * Register the gesture to the current region.\n   * @param {Object} gesture - The gesture to register\n   * @param {String} key - The key to define the new gesture as.\n   */\n  registerGesture(gesture, key) {\n    this.assignGestureId(gesture);\n    this.registeredGestures[key] = gesture;\n  }\n\n  /**\n   * Tracks the gesture to this state object to become uniquely identifiable.\n   * Useful for nested Regions.\n   * @param {Gesture} gesture - The gesture to track\n   */\n  assignGestureId(gesture) {\n    gesture.setId(this.regionId + '-' + this.numGestures++);\n  }\n\n}\n/**\n * Searches through each input, comparing the browser's identifier key\n *  for touches, to the stored one in each input\n * @param {Array} inputs - The array of inputs in state.\n * @param {String} identifier - The identifier the browser has assigned.\n * @return {Input} - The input object with the corresponding identifier,\n *  null if it did not find any.\n */\nfunction findInputById(inputs, identifier) {\n  return inputs.find( i => i.identifier === identifier );\n}\n\nexport default State;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/State.js","/**\n * @file Pan.js\n * Contains the Pan class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Pan is defined as a normal movement in any direction on a screen.\n * Pan gestures do not track start events and can interact with distance gestures\n * @class Pan\n */\nclass Pan extends Gesture {\n  /**\n   * Constructor function for the Pan class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs=1] - Number of inputs for the\n   *  Pan gesture.\n   * @param {Number} [options.threshold=1] - The minimum number of\n   * pixels the input has to move to trigger this gesture.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'pan';\n\n    /**\n     * The number of inputs to trigger a Pan can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The minimum amount in pixels the pan must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Marks each input as active,\n   * so it can invalidate any end events.\n   * @param {Array} inputs\n   */\n  start(inputs) {\n    inputs.forEach((input) => {\n      const progress = input.getGestureProgress(this.getId());\n      progress.active = true;\n      progress.lastEmitted = {\n        x: input.current.x,\n        y: input.current.y,\n      };\n    });\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture.\n   * Fired whenever the input length is met, and keeps a boolean flag that\n   * the gesture has fired at least once.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object} - Returns the distance in pixels between the two inputs.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs !== inputs.length) return null;\n\n    const output = {\n      data: [],\n    };\n\n    inputs.forEach( (input, index) => {\n      const progress = input.getGestureProgress(this.getId());\n      const distanceFromLastEmit = util.distanceBetweenTwoPoints(\n        progress.lastEmitted.x,\n        progress.lastEmitted.y,\n        input.current.x,\n        input.current.y\n      );\n      const reachedThreshold = distanceFromLastEmit >= this.threshold;\n\n      if (progress.active && reachedThreshold) {\n        output.data[index] = packData( input, progress );\n        progress.lastEmitted.x = input.current.x;\n        progress.lastEmitted.y = input.current.y;\n      }\n    });\n\n    return output;\n\n    function packData( input, progress ) {\n      const distanceFromOrigin = util.distanceBetweenTwoPoints(\n        input.initial.x,\n        input.current.x,\n        input.initial.y,\n        input.current.y\n      );\n      const directionFromOrigin = util.getAngle(\n        input.initial.x,\n        input.initial.y,\n        input.current.x,\n        input.current.y\n      );\n      const currentDirection = util.getAngle(\n        progress.lastEmitted.x,\n        progress.lastEmitted.y,\n        input.current.x,\n        input.current.y\n      );\n      const change = {\n        x: input.current.x - progress.lastEmitted.x,\n        y: input.current.y - progress.lastEmitted.y,\n      };\n\n      return {\n        distanceFromOrigin,\n        directionFromOrigin,\n        currentDirection,\n        change,\n      };\n    }\n  }\n\n  /* move*/\n\n  /**\n   * end() - Event hook for the end of a gesture. If the gesture has at least\n   * fired once, then it ends on the first end event such that any remaining\n   * inputs will not trigger the event until all inputs have reached the\n   * touchend event. Any touchend->touchstart events that occur before all\n   * inputs are fully off the screen should not fire.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    inputs.forEach((input) => {\n      const progress = input.getGestureProgress(this.getId());\n      progress.active = false;\n    });\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Pan;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Pan.js","/**\n * @file Distance.js\n * Contains the abstract Distance class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Distance is defined as two inputs moving either together or apart.\n * @class Distance\n */\nclass Distance extends Gesture {\n  /**\n   * Constructor function for the Distance class.\n   * @param {Object} options\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'distance';\n\n    /**\n     * The minimum amount in pixels the inputs must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Initialized the lastEmitted\n   * gesture and stores it in the first input for reference events.\n   * @param {Array} inputs\n   */\n  start(inputs, state, element) {\n    if(!this.isValid(inputs, state, element)) {\n      return null;\n    }\n    if (inputs.length === DEFAULT_INPUTS) {\n      // Store the progress in the first input.\n      const progress = inputs[0].getGestureProgress(this.type);\n      progress.lastEmittedDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n    }\n  }\n\n  /**\n   * Event hook for the move of a gesture.\n   *  Determines if the two points are moved in the expected direction relative\n   *  to the current distance and the last distance.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object | null} - Returns the distance in pixels between two inputs\n   */\n  move(inputs, state, element) {\n    if (state.numActiveInputs() === DEFAULT_INPUTS) {\n      const currentDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n      const centerPoint = util.getMidpoint(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n\n      // Progress is stored in the first input.\n      const progress = inputs[0].getGestureProgress(this.type);\n      const change = currentDistance - progress.lastEmittedDistance;\n\n      if (Math.abs(change) >= this.threshold) {\n        progress.lastEmittedDistance = currentDistance;\n        return {\n          distance: currentDistance,\n          center: centerPoint,\n          change,\n        };\n      }\n    }\n\n    return null;\n  }\n}\n\nexport default Distance;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Distance.js","/**\n * @file Rotate.js\n * Contains the Rotate class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\n\n/**\n * A Rotate is defined as two inputs moving about a circle,\n * maintaining a relatively equal radius.\n * @class Rotate\n */\nclass Rotate extends Gesture {\n  /**\n   * Constructor function for the Rotate class.\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'rotate';\n\n    /**\n     * The number of touches required to emit Rotate events.\n     * @type {Number}\n     */\n    this.numInputs = options.numInputs || DEFAULT_INPUTS;\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture. Obtains the midpoint of two\n   * the two inputs and calculates the projection of the right most input along\n   * a unit circle to obtain an angle. This angle is compared to the previously\n   * calculated angle to output the change of distance, and is compared to the\n   * initial angle to output the distance from the initial angle to the current\n   * angle.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current listener.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - null if this event did not occur\n   * @return {Object} obj.angle - The current angle along the unit circle\n   * @return {Object} obj.distanceFromOrigin - The angular distance travelled\n   * from the initial right most point.\n   * @return {Object} obj.distanceFromLast - The change of angle between the\n   * last position and the current position.\n   */\n  move(inputs, state, element) {\n    const numActiveInputs = state.numActiveInputs();\n    if (this.numInputs !== numActiveInputs) return null;\n\n    let currentPivot, initialPivot;\n    let input;\n    if (numActiveInputs === 1) {\n      const bRect = element.getBoundingClientRect();\n      currentPivot = {\n        x: bRect.left + bRect.width / 2,\n        y: bRect.top + bRect.height / 2,\n      };\n      initialPivot = currentPivot;\n      input = inputs[0];\n    } else {\n      currentPivot = util.getMidpoint(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n      input = util.getRightMostInput(inputs);\n    }\n\n    // Translate the current pivot point.\n    const currentAngle = util.getAngle(\n      currentPivot.x, \n      currentPivot.y,\n      input.current.x,\n      input.current.y);\n\n    const progress = input.getGestureProgress(this.getId());\n    if (!progress.initialAngle) {\n      progress.initialAngle = progress.previousAngle = currentAngle;\n      progress.distance = progress.change = 0;\n    } else {\n      progress.change = util.getAngularDistance(\n        progress.previousAngle,\n        currentAngle);\n      progress.distance = progress.distance + progress.change;\n    }\n\n    progress.previousAngle = currentAngle;\n\n    return {\n      angle: currentAngle,\n      distanceFromOrigin: progress.distance,\n      distanceFromLast: progress.change,\n    };\n  }\n\n  /* move*/\n}\n\nexport default Rotate;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Rotate.js","/**\n * @file Swipe.js\n * Contains the Swipe class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MAX_REST_TIME = 100;\nconst DEFAULT_ESCAPE_VELOCITY = 0.2;\nconst DEFAULT_TIME_DISTORTION = 100;\nconst DEFAULT_MAX_PROGRESS_STACK = 10;\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n * @class Swipe\n */\nclass Swipe extends Gesture {\n\n  /**\n   * Constructor function for the Swipe class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs] - The number of inputs to trigger a\n   * Swipe can be variable, and the maximum number being a factor of the browser\n   *  move and current move events.\n   * @param {Number} [options.maxRestTime] - The maximum resting time a point\n   *  has between it's last\n   * @param {Number} [options.escapeVelocity] - The minimum velocity the input\n   *  has to be at to emit a swipe.\n   * @param {Number} [options.timeDistortion] - (EXPERIMENTAL) A value of time\n   *  in milliseconds to distort between events.\n   * @param {Number} [options.maxProgressStack] - (EXPERIMENTAL)The maximum\n   *  amount of move events to keep\n   * track of for a swipe.\n   */\n  constructor(options) {\n    super();\n    /**\n     * The type of the Gesture\n     * @type {String}\n     */\n    this.type = 'swipe';\n\n    /**\n     * The number of inputs to trigger a Swipe can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The maximum resting time a point has between it's last move and\n     * current move events.\n     * @type {Number}\n     */\n    this.maxRestTime = (options && options.maxRestTime) ?\n      options.maxRestTime : DEFAULT_MAX_REST_TIME;\n\n    /**\n     * The minimum velocity the input has to be at to emit a swipe.\n     * This is useful for determining the difference between\n     * a swipe and a pan gesture.\n     * @type {number}\n     */\n    this.escapeVelocity = (options && options.escapeVelocity) ?\n      options.escapeVelocity : DEFAULT_ESCAPE_VELOCITY;\n\n    /**\n     * (EXPERIMENTAL) A value of time in milliseconds to distort between events.\n     * Browsers do not accurately measure time with the Date constructor in\n     * milliseconds, so consecutive events sometimes display the same timestamp\n     * but different x/y coordinates. This will distort a previous time\n     * in such cases by the timeDistortion's value.\n     * @type {number}\n     */\n    this.timeDistortion = (options && options.timeDistortion) ?\n      options.timeDistortion : DEFAULT_TIME_DISTORTION;\n\n    /**\n     * (EXPERIMENTAL) The maximum amount of move events to keep track of for a\n     * swipe. This helps give a more accurate estimate of the user's velocity.\n     * @type {number}\n     */\n    this.maxProgressStack = (options && options.maxProgressStack) ?\n      options.maxProgressStack : DEFAULT_MAX_PROGRESS_STACK;\n  }\n\n  /**\n   * Event hook for the move of a gesture. Captures an input's x/y coordinates\n   * and the time of it's event on a stack.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Swipe does not emit from a move.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs === inputs.length) {\n      for (let i = 0; i < inputs.length; i++) {\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (!progress.moves) {\n          progress.moves = [];\n        }\n\n        progress.moves.push({\n          time: new Date().getTime(),\n          x: inputs[i].current.x,\n          y: inputs[i].current.y,\n        });\n\n        if (progress.length > this.maxProgressStack) {\n          progress.moves.shift();\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Determines if the input's history validates a swipe motion.\n   * Determines if it did not come to a complete stop (maxRestTime), and if it\n   * had enough of a velocity to be considered (ESCAPE_VELOCITY).\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    if (this.numInputs === inputs.length) {\n      let output = {\n        data: [],\n      };\n\n      for (var i = 0; i < inputs.length; i++) {\n        // Determine if all input events are on the 'end' event.\n        if (inputs[i].current.type !== 'end') {\n          return;\n        }\n\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (progress.moves && progress.moves.length > 2) {\n          // CHECK : Return if the input has not moved in maxRestTime ms.\n\n          let currentMove = progress.moves.pop();\n          if ((new Date().getTime()) - currentMove.time > this.maxRestTime) {\n            return null;\n          }\n\n          let lastMove;\n          let index = progress.moves.length - 1;\n\n          /* Date is unreliable, so we retrieve the last move event where\n           the time is not the same. */\n          while (index !== -1) {\n            if (progress.moves[index].time !== currentMove.time) {\n              lastMove = progress.moves[index];\n              break;\n            }\n\n            index--;\n          }\n\n          /* If the date is REALLY unreliable, we apply a time distortion\n           to the last event.\n           */\n          if (!lastMove) {\n            lastMove = progress.moves.pop();\n            lastMove.time += this.timeDistortion;\n          }\n\n          var velocity = util.getVelocity(lastMove.x, lastMove.y, lastMove.time,\n            currentMove.x, currentMove.y, currentMove.time);\n\n          output.data[i] = {\n            velocity: velocity,\n            distance: util.distanceBetweenTwoPoints(lastMove.x, currentMove.x, lastMove.y, currentMove.y),\n            duration:  currentMove.time - lastMove.time,\n            currentDirection: util.getAngle(\n              lastMove.x,\n              lastMove.y,\n              currentMove.x,\n              currentMove.y),\n          };\n        }\n      }\n\n      for (var i = 0; i < output.data.length; i++) {\n        if (velocity < this.escapeVelocity) {\n          return null;\n        }\n      }\n\n      if (output.data.length > 0) {\n        return output;\n      }\n    }\n\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Swipe;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Swipe.js","/**\n * @file Tap.js\n * Contains the Tap class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_MIN_DELAY_MS = 0;\nconst DEFAULT_MAX_DELAY_MS = 300;\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MOVE_PX_TOLERANCE = 10;\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n * @class Tap\n */\nclass Tap extends Gesture {\n  /**\n   * Constructor function for the Tap class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.minDelay=0] - The minimum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.maxDelay=300] - The maximum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.numInputs=1] - Number of inputs for Tap gesture.\n   * @param {Number} [options.tolerance=10] - The tolerance in pixels\n   *  a user can move.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'tap';\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.minDelay = (options && options.minDelay) ?\n      options.minDelay : DEFAULT_MIN_DELAY_MS;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.maxDelay = (options && options.maxDelay) ?\n      options.maxDelay : DEFAULT_MAX_DELAY_MS;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     * @type {number}\n     */\n    this.tolerance = (options && options.tolerance) ?\n      options.tolerance : DEFAULT_MOVE_PX_TOLERANCE;\n  }\n\n  /* constructor*/\n\n  /**\n   * Event hook for the start of a gesture. Keeps track of when the inputs\n   * trigger the start event.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null} - Tap does not trigger on a start event.\n   */\n  start(inputs) {\n    if (inputs.length === this.numInputs) {\n      inputs.forEach((input) => {\n        let progress = input.getGestureProgress(this.type);\n        progress.start = new Date().getTime();\n      });\n    }\n\n    return null;\n  }\n\n  /* start*/\n\n  /**\n   * Event hook for the move of a gesture. The Tap event reaches here if the\n   * user starts to move their input before an 'end' event is reached.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Tap does not trigger on a move event.\n   */\n  move(inputs, state, element) {\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() === 'move') {\n        let current = inputs[i].current;\n        let previous = inputs[i].previous;\n        if (!util.isWithin(\n            current.x,\n            current.y,\n            previous.x,\n            previous.y,\n            this.tolerance)) {\n          let type = this.type;\n          inputs.forEach(function(input) {\n            input.resetProgress(type);\n          });\n\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Event hook for the end of a gesture.\n   * Determines if this the tap event can be fired if the delay and tolerance\n   * constraints are met. Also waits for all of the inputs to be off the screen\n   * before determining if the gesture is triggered.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   * Object with information otherwise. Returns the interval time between start\n   * and end events.\n   */\n  end(inputs) {\n    if (inputs.length !== this.numInputs) {\n      return null;\n    }\n\n    let startTime = Number.MAX_VALUE;\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() !== 'end') {\n        return null;\n      }\n\n      let progress = inputs[i].getGestureProgress(this.type);\n      if (!progress.start) {\n        return null;\n      }\n\n      // Find the most recent input's startTime\n      if (progress.start < startTime) {\n        startTime = progress.start;\n      }\n    }\n\n    let interval = new Date().getTime() - startTime;\n    if ((this.minDelay <= interval) && (this.maxDelay >= interval)) {\n      return {\n        interval: interval,\n      };\n    } else {\n      let type = this.type;\n      inputs.forEach(function(input) {\n        input.resetProgress(type);\n      });\n\n      return null;\n    }\n  }\n\n  /* end*/\n}\n\nexport default Tap;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Tap.js","/**\n * @file Binding.js\n */\n\n/**\n * Responsible for creating a binding between an element and a gesture.\n * @class Binding\n */\nclass Binding {\n  /**\n   * Constructor function for the Binding class.\n   * @param {Element} element - The element to associate the gesture to.\n   * @param {Gesture} gesture - A instance of the Gesture type.\n   * @param {Function} handler - The function handler to execute when a\n   * gesture is recognized\n   * on the associated element.\n   * @param {Boolean} [capture=false] - A boolean signifying if the event is\n   * to be emitted during\n   * the capture or bubble phase.\n   * @param {Boolean} [bindOnce=false] - A boolean flag\n   * used for the bindOnce syntax.\n   */\n  constructor(element, gesture, handler, capture, bindOnce) {\n    /**\n     * The element to associate the gesture to.\n     * @type {Element}\n     */\n    this.element = element;\n    /**\n     * A instance of the Gesture type.\n     * @type {Gesture}\n     */\n    this.gesture = gesture;\n    /**\n     * The function handler to execute when a gesture is\n     * recognized on the associated element.\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * A boolean signifying if the event is to be\n     * emitted during the capture or bubble phase.\n     * @type {Boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * A boolean flag used for the bindOnce syntax.\n     * @type {Boolean}\n     */\n    this.bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n  }\n\n}\n\nexport default Binding;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Binding.js","/**\n * @file Input.js\n */\n\nimport ZingEvent from './ZingEvent.js';\n\n/**\n * Tracks a single input and contains information about the\n * current, previous, and initial events.\n * Contains the progress of each Input and it's associated gestures.\n * @class Input\n */\nclass Input {\n\n  /**\n   * Constructor function for the Input class.\n   * @param {Event} event - The Event object from the window\n   * @param {Number} [identifier=0] - The identifier for each input event\n   * (taken from event.changedTouches)\n   */\n  constructor(event, identifier) {\n    let currentEvent = new ZingEvent(event, identifier);\n\n    /**\n     * Holds the initial event object. A touchstart/mousedown event.\n     * @type {ZingEvent}\n     */\n    this.initial = currentEvent;\n\n    /**\n     * Holds the most current event for this Input, disregarding any other past,\n     * current, and future events that other Inputs participate in.\n     * e.g. This event ended in an 'end' event, but another Input is still\n     * participating in events -- this will not be updated in such cases.\n     * @type {ZingEvent}\n     */\n    this.current = currentEvent;\n\n    /**\n     * Holds the previous event that took place.\n     * @type {ZingEvent}\n     */\n    this.previous = currentEvent;\n\n    /**\n     * Refers to the event.touches index, or 0 if a simple mouse event occurred.\n     * @type {Number}\n     */\n    this.identifier = (typeof identifier !== 'undefined') ? identifier : 0;\n\n    /**\n     * Stores internal state between events for\n     * each gesture based off of the gesture's id.\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n\n  /**\n   * Receives an input, updates the internal state of what the input has done.\n   * @param {Event} event - The event object to wrap with a ZingEvent.\n   * @param {Number} touchIdentifier - The index of inputs, from event.touches\n   */\n  update(event, touchIdentifier) {\n    this.previous = this.current;\n    this.current = new ZingEvent(event, touchIdentifier);\n  }\n\n  /**\n   * Returns the progress of the specified gesture.\n   * @param {String} id - The identifier for each unique Gesture's progress.\n   * @return {Object} - The progress of the gesture.\n   * Creates an empty object if no progress has begun.\n   */\n  getGestureProgress(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n    return this.progress[id];\n  }\n\n  /**\n   * Returns the normalized current Event's type.\n   * @return {String} The current event's type ( start | move | end )\n   */\n  getCurrentEventType() {\n    return this.current.type;\n  }\n\n  /**\n   * Resets a progress/state object of the specified gesture.\n   * @param {String} id - The identifier of the specified gesture\n   */\n  resetProgress(id) {\n    this.progress[id] = {};\n  }\n\n}\n\nexport default Input;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Input.js","/**\n * @file ZingEvent.js\n * Contains logic for ZingEvents\n */\n\nimport util from '../util.js';\n\nconst INITIAL_COORDINATE = 0;\n/**\n * An event wrapper that normalizes events across browsers and input devices\n * @class ZingEvent\n */\nclass ZingEvent {\n  /**\n   * @constructor\n   * @param {Event} event - The event object being wrapped.\n   * @param {Array} event.touches - The number of touches on\n   *  a screen (mobile only).\n   * @param {Object} event.changedTouches - The TouchList representing\n   * points that participated in the event.\n   * @param {Number} touchIdentifier - The index of touch if applicable\n   */\n  constructor(event, touchIdentifier) {\n    /**\n     * The original event object.\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type of event or null if it is an event not predetermined.\n     * @see util.normalizeEvent\n     * @type {String | null}\n     */\n    this.type = util.normalizeEvent[ event.type ];\n\n    /**\n     * The X coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.x = INITIAL_COORDINATE;\n\n    /**\n     * The Y coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.y = INITIAL_COORDINATE;\n\n    let eventObj;\n    if (event.touches && event.changedTouches) {\n      eventObj = Array.from(event.changedTouches).find( t => {\n        return t.identifier === touchIdentifier;\n      });\n    } else {\n      eventObj = event;\n    }\n\n    this.x = this.clientX = eventObj.clientX;\n    this.y = this.clientY = eventObj.clientY;\n\n    this.pageX = eventObj.pageX;\n    this.pageY = eventObj.pageY;\n\n    this.screenX = eventObj.screenX;\n    this.screenY = eventObj.screenY;\n  }\n}\n\nexport default ZingEvent;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/ZingEvent.js"],"sourceRoot":""}