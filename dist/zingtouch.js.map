{"version":3,"sources":["webpack:///webpack/bootstrap ba9088a1448c745fe5c7","webpack:///./src/core/main.js","webpack:///./src/ZingTouch.js","webpack:///./src/core/classes/Region.js","webpack:///./src/core/classes/Binder.js","webpack:///./src/gestures/Gesture.js","webpack:///./src/core/arbiter.js","webpack:///./src/core/dispatcher.js","webpack:///./src/core/interpreter.js","webpack:///./src/core/util.js","webpack:///./src/core/classes/State.js","webpack:///./src/gestures/Expand.js","webpack:///./src/gestures/Distance.js","webpack:///./src/gestures/Pan.js","webpack:///./src/gestures/Pinch.js","webpack:///./src/gestures/Rotate.js","webpack:///./src/gestures/Swipe.js","webpack:///./src/gestures/Tap.js","webpack:///./src/core/classes/Binding.js","webpack:///./src/core/classes/Input.js","webpack:///./src/core/classes/ZingEvent.js"],"names":["window","ZingTouch","_regions","Gesture","Expand","Pan","Pinch","Rotate","Swipe","Tap","Region","element","capture","preventDefault","id","length","region","push","state","eventNames","PointerEvent","map","name","addEventListener","e","gesture","handler","bindOnce","tagName","addBinding","bind","bindings","retrieveBindingsByElement","unbound","forEach","binding","registeredGestures","registeredGesture","removeEventListener","getId","key","Error","setType","registerGesture","getType","Binder","Object","keys","type","object","inputs","arbiter","event","normalizeEvent","buttons","resetInputs","updateInputs","retrieveBindingsByInitialPos","setMSPreventDefault","returnValue","removeMSPreventDefault","toBeDispatched","gestures","path","getPropagationPath","getPathIndex","index","data","events","endCount","input","getCurrentEventType","dispatcher","newEvent","CustomEvent","detail","bubbles","cancelable","emitEvent","target","dispatchEvent","unbind","interpreter","evType","candidates","result","current","CIRCLE_DEGREES","HALF_CIRCLE_DEGREES","util","isWithin","currentX","currentY","previousX","previousY","tolerance","Math","abs","distanceBetweenTwoPoints","x0","x1","y0","y1","dist","sqrt","round","getMidpoint","x","y","getAngle","originX","originY","projectionX","projectionY","angle","atan2","PI","getAngularDistance","start","end","sign","getVelocity","startX","startY","startTime","endX","endY","endTime","distance","getRightMostInput","rightMost","Number","MIN_VALUE","initial","isInteger","value","isInside","rect","getBoundingClientRect","left","width","top","height","node","document","parentNode","obj","i","style","DEFAULT_MOUSE_ID","State","regionId","numGestures","boundGesture","indexOf","assignGestureId","matches","inputsInside","filter","regionElement","identifier","eventType","touches","pointerType","targetTouches","changedTouches","hasOwnProperty","parseInt","update","pointerId","findInputById","endType","setId","options","DEFAULT_INPUTS","DEFAULT_MIN_THRESHOLD","Distance","threshold","progress","getGestureProgress","lastEmittedDistance","numActiveInputs","currentDistance","lastDistance","previous","numInputs","active","lastEmitted","output","reachedThreshold","yThreshold","xThreshold","distanceFromOrigin","directionFromOrigin","currentDirection","MAX_INPUTS","referencePivot","diffX","diffY","bRect","currentPivot","currentAngle","initialAngle","previousAngle","change","distanceFromLast","DEFAULT_MAX_REST_TIME","DEFAULT_ESCAPE_VELOCITY","DEFAULT_TIME_DISTORTION","DEFAULT_MAX_PROGRESS_STACK","maxRestTime","escapeVelocity","timeDistortion","maxProgressStack","moves","time","Date","getTime","shift","currentMove","pop","lastMove","velocity","DEFAULT_MIN_DELAY_MS","DEFAULT_MAX_DELAY_MS","DEFAULT_MOVE_PX_TOLERANCE","minDelay","maxDelay","resetProgress","MAX_VALUE","interval","Binding","Input","currentEvent","touchIdentifier","INITIAL_COORDINATE","ZingEvent","originalEvent","eventObj","clientX","clientY","pageX","pageY","screenX","screenY"],"mappings":"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","file":"/Users/mschultz/zingtouch/dist/zingtouch.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ba9088a1448c745fe5c7","/**\n * @file main.js\n * Main file to setup event listeners on the document,\n * and to expose the ZingTouch object\n */\n\nimport ZingTouch from './../ZingTouch.js';\nwindow.ZingTouch = ZingTouch;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/main.js","/**\n * @file ZingTouch.js\n * Main object containing API methods and Gesture constructors\n */\n\nimport Region from './core/classes/Region.js';\nimport Gesture from './gestures/Gesture.js';\nimport Expand from './gestures/Expand.js';\nimport Pan from './gestures/Pan.js';\nimport Pinch from './gestures/Pinch.js';\nimport Rotate from './gestures/Rotate.js';\nimport Swipe from './gestures/Swipe.js';\nimport Tap from './gestures/Tap.js';\n\n/**\n * The global API interface for ZingTouch. Contains a constructor for the\n * Region Object, and constructors for each predefined Gesture.\n * @type {Object}\n * @namespace ZingTouch\n */\nlet ZingTouch = {\n  _regions: [],\n\n  // Constructors\n  Gesture: Gesture,\n  Expand: Expand,\n  Pan: Pan,\n  Pinch: Pinch,\n  Rotate: Rotate,\n  Swipe: Swipe,\n  Tap: Tap,\n  Region: function(element, capture, preventDefault) {\n    let id = ZingTouch._regions.length;\n    let region = new Region(element, capture, preventDefault, id);\n    ZingTouch._regions.push(region);\n    return region;\n  },\n};\n\nexport default ZingTouch;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ZingTouch.js","/**\n * @file Region.js\n */\n\nimport Binder from './Binder.js';\nimport Gesture from './../../gestures/Gesture.js';\nimport arbiter from './../arbiter.js';\nimport State from './State.js';\n\n/**\n * Allows the user to specify a region to capture all events to feed ZingTouch\n * into. This can be as narrow as the element itself, or as big as the document\n * itself. The more specific an area, the better performant the overall\n * application will perform. Contains API methods to bind/unbind specific\n * elements to corresponding gestures. Also contains the ability to\n * register/unregister new gestures.\n * @class Region\n */\nclass Region {\n\n  /**\n   * Constructor function for the Region class.\n   * @param {Element} element - The element to capture all\n   *  window events in that region to feed into ZingTouch.\n   * @param {boolean} [capture=false] - Whether the region listens for\n   *  captures or bubbles.\n   * @param {boolean} [preventDefault=true] - Whether the default browser\n   *  functionality should be disabled;\n   * @param {Number} id - The id of the region, assigned by the ZingTouch object\n   */\n  constructor(element, capture, preventDefault, id) {\n    /**\n     * The identifier for the Region. This is assigned by the ZingTouch object\n     * and is used to hash gesture id for uniqueness.\n     * @type {Number}\n     */\n    this.id = id;\n\n    /**\n     * The element being bound to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     * @type {boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * Boolean to disable browser functionality such as scrolling and zooming\n     * over the region\n     * @type {boolean}\n     */\n    this.preventDefault = (typeof preventDefault !== 'undefined') ?\n      preventDefault : true;\n\n    /**\n     * The internal state object for a Region.\n     * Keeps track of registered gestures, inputs, and events.\n     * @type {State}\n     */\n    this.state = new State(id);\n\n    let eventNames = [];\n    if (window.PointerEvent) {\n      eventNames = [\n        'pointerdown',\n        'pointermove',\n        'pointerup',\n      ];\n    } else {\n      eventNames = [\n        'mousedown',\n        'mousemove',\n        'mouseup',\n        'touchstart',\n        'touchmove',\n        'touchend',\n      ];\n    }\n\n    // Bind detected browser events to the region element.\n    eventNames.map((name) => {\n      element.addEventListener(name, (e) => {\n        arbiter(e, this);\n      }, this.capture);\n    });\n  }\n\n  /**\n   * Bind an element to a registered/unregistered gesture with\n   * multiple function signatures.\n   * @example\n   * bind(element) - chainable\n   * @example\n   * bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} [gesture] - Gesture key, or a Gesture object.\n   * @param {Function} [handler] - The function to execute when an event is\n   *  emitted.\n   * @param {Boolean} [capture] - capture/bubble\n   * @param {Boolean} [bindOnce = false] - Option to bind once and\n   *  only emit the event once.\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bind(element, gesture, handler, capture, bindOnce) {\n    if (!element || (element && !element.tagName)) {\n      throw 'Bind must contain an element';\n    }\n\n    bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n    if (!gesture) {\n      return new Binder(element, bindOnce, this.state);\n    } else {\n      this.state.addBinding(element, gesture, handler, capture, bindOnce);\n    }\n  }\n\n  /**\n   * Bind an element and sets up actions to remove the binding once\n   * it has been emitted for the first time.\n   * 1. bind(element) - chainable\n   * 2. bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} gesture - Gesture key, or a Gesture object.\n   * @param {Function} handler - The function to execute when an\n   *  event is emitted.\n   * @param {Boolean} capture - capture/bubble\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bindOnce(element, gesture, handler, capture) {\n    this.bind(element, gesture, handler, capture, true);\n  }\n\n  /**\n   * Unbinds an element from either the specified gesture\n   *  or all if no element is specified.\n   * @param {Element} element -The element to remove.\n   * @param {String | Object} [gesture] - A String representing the gesture,\n   *   or the actual object being used.\n   * @return {Array} - An array of Bindings that were unbound to the element;\n   */\n  unbind(element, gesture) {\n    let bindings = this.state.retrieveBindingsByElement(element);\n    let unbound = [];\n\n    bindings.forEach((binding) => {\n      if (gesture) {\n        if (typeof gesture === 'string' &&\n          this.state.registeredGestures[gesture]) {\n          let registeredGesture = this.state.registeredGestures[gesture];\n          if (registeredGesture.id === binding.gesture.id) {\n            element.removeEventListener(\n              binding.gesture.getId(),\n              binding.handler, binding.capture);\n            unbound.push(binding);\n          }\n        }\n      } else {\n        element.removeEventListener(\n          binding.gesture.getId(),\n          binding.handler,\n          binding.capture);\n        unbound.push(binding);\n      }\n    });\n\n    return unbound;\n  }\n\n  /* unbind*/\n\n  /**\n   * Registers a new gesture with an assigned key\n   * @param {String} key - The key used to register an element to that gesture\n   * @param {Gesture} gesture - A gesture object\n   */\n  register(key, gesture) {\n    if (typeof key !== 'string') {\n      throw new Error('Parameter key is an invalid string');\n    }\n\n    if (!gesture instanceof Gesture) {\n      throw new Error('Parameter gesture is an invalid Gesture object');\n    }\n\n    gesture.setType(key);\n    this.state.registerGesture(gesture, key);\n  }\n\n  /* register*/\n\n  /**\n   * Un-registers a gesture from the Region's state such that\n   * it is no longer emittable.\n   * Unbinds all events that were registered with the type.\n   * @param {String|Object} key - Gesture key that was used to\n   *  register the object\n   * @return {Object} - The Gesture object that was unregistered\n   *  or null if it could not be found.\n   */\n  unregister(key) {\n    this.state.bindings.forEach((binding) => {\n      if (binding.gesture.getType() === key) {\n        binding.element.removeEventListener(binding.gesture.getId(),\n          binding.handler, binding.capture);\n      }\n    });\n\n    let registeredGesture = this.state.registeredGestures[key];\n    delete this.state.registeredGestures[key];\n    return registeredGesture;\n  }\n}\n\nexport default Region;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Region.js","/**\n * @file Binder.js\n */\n\n/**\n * A chainable object that contains a single element to be bound upon.\n * Called from ZingTouch.bind(), and is used to chain over gesture callbacks.\n * @class\n */\nclass Binder {\n  /**\n   * Constructor function for the Binder class.\n   * @param {Element} element - The element to bind gestures to.\n   * @param {Boolean} bindOnce - Option to bind once and only emit\n   * the event once.\n   * @param {Object} state - The state of the Region that is being bound to.\n   * @return {Object} - Returns 'this' to be chained over and over again.\n   */\n  constructor(element, bindOnce, state) {\n    /**\n     * The element to bind gestures to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    Object.keys(state.registeredGestures).forEach((key) => {\n      this[key] = (handler, capture) => {\n        state.addBinding(this.element, key, handler, capture, bindOnce);\n        return this;\n      };\n    });\n  }\n\n}\n\nexport default Binder;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Binder.js","/**\n * @file Gesture.js\n * Contains the Gesture class\n */\n\n/**\n * The Gesture class that all gestures inherit from.\n */\nclass Gesture {\n  /**\n   * Constructor function for the Gesture class.\n   * @class Gesture\n   */\n  constructor() {\n    /**\n     * The generic string type of gesture ('expand'|'pan'|'pinch'|\n     *  'rotate'|'swipe'|'tap').\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * The unique identifier for each gesture determined at bind time by the\n     * state object. This allows for distinctions across instance variables of\n     * Gestures that are created on the fly (e.g. Tap-1, Tap-2, etc).\n     * @type {String|null}\n     */\n    this.id = null;\n  }\n\n  /**\n   * Set the type of the gesture to be called during an event\n   * @param {String} type - The unique identifier of the gesture being created.\n   */\n  setType(type) {\n    this.type = type;\n  }\n\n  /**\n   * getType() - Returns the generic type of the gesture\n   * @return {String} - The type of gesture\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Set the id of the gesture to be called during an event\n   * @param {String} id - The unique identifier of the gesture being created.\n   */\n  setId(id) {\n    this.id = id;\n  }\n\n  /**\n   * Return the id of the event. If the id does not exist, return the type.\n   * @return {String}\n   */\n  getId() {\n    return (this.id !== null) ? this.id : this.type;\n  }\n\n  /**\n   * Updates internal properties with new ones, only if the properties exist.\n   * @param {Object} object\n   */\n  update(object) {\n    for (let key in object) {\n      if (this[key]) {\n        this[key] = object[key];\n      }\n    }\n  }\n\n  /**\n   * start() - Event hook for the start of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object}  - Default of null\n   */\n  start(inputs) {\n    return null;\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null|Object} - Default of null\n   */\n  move(inputs, state, element) {\n    return null;\n  }\n\n  /**\n   * end() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object}  - Default of null\n   */\n  end(inputs) {\n    return null;\n  }\n\n}\n\nexport default Gesture;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Gesture.js","/**\n * @file arbiter.js\n * Contains logic for the dispatcher\n */\n\nimport dispatcher from './dispatcher.js';\nimport interpreter from './interpreter.js';\nimport util from './util.js';\n\n/**\n * Function that handles event flow, negotiating with the interpreter,\n * and dispatcher.\n * 1. Receiving all touch events in the window.\n * 2. Determining which gestures are linked to the target element.\n * 3. Negotiating with the Interpreter what event should occur.\n * 4. Sending events to the dispatcher to emit events to the target.\n * @param {Event} event - The event emitted from the window object.\n * @param {Object} region - The region object of the current listener.\n */\nfunction arbiter(event, region) {\n  const state = region.state;\n\n  /*\n   Return if a gesture is not in progress and won't be. Also catches the case\n   where a previous event is in a partial state (2 finger pan, waits for both\n   inputs to reach touchend)\n   */\n  if (state.inputs.length === 0 && util.normalizeEvent(event.type) !==\n    'start') {\n    return;\n  }\n\n  /*\n   Check for 'stale' or events that lost focus\n   (e.g. a pan goes off screen/off region.)\n   Does not affect mobile devices.\n   */\n  if (typeof event.buttons !== 'undefined' &&\n    util.normalizeEvent(event.type) !== 'end' &&\n    event.buttons === 0) {\n    state.resetInputs();\n    return;\n  }\n\n  // Update the state with the new events. If the event is stopped, return;\n  if (!state.updateInputs(event, region.element)) {\n    return;\n  }\n\n  // Retrieve the initial target from any one of the inputs\n  const bindings = state.retrieveBindingsByInitialPos();\n  if (bindings.length > 0) {\n    if (region.preventDefault) {\n      util.setMSPreventDefault(region.element);\n      event.preventDefault ? event.preventDefault():(event.returnValue = false);\n    } else {\n      util.removeMSPreventDefault(region.element);\n    }\n\n    const toBeDispatched = {};\n    const gestures = interpreter(bindings, event, state);\n\n    /* Determine the deepest path index to emit the event\n     from, to avoid duplicate events being fired. */\n\n    gestures.forEach((gesture) => {\n      const id = gesture.binding.gesture.id;\n      if (toBeDispatched[id]) {\n        const path = util.getPropagationPath(event);\n        if (util.getPathIndex(path, gesture.binding.element) <\n          util.getPathIndex(path, toBeDispatched[id].binding.element)) {\n          toBeDispatched[id] = gesture;\n        }\n      } else {\n        toBeDispatched[id] = gesture;\n      }\n    });\n\n    Object.keys(toBeDispatched).forEach((index) => {\n      const gesture = toBeDispatched[index];\n      dispatcher(gesture.binding, gesture.data, gesture.events);\n    });\n  }\n\n  let endCount = 0;\n  state.inputs.forEach((input) => {\n    if (input.getCurrentEventType() === 'end') {\n      endCount++;\n    }\n  });\n\n  if (endCount === state.inputs.length) {\n    state.resetInputs();\n  }\n}\n\nexport default arbiter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/arbiter.js","/**\n * @file dispatcher.js\n * Contains logic for the dispatcher\n */\n\n/**\n * Emits data at the target element if available, and bubbles up from\n * the target to the parent until the document has been reached.\n * Called from the arbiter.\n * @param {Binding} binding - An object of type Binding\n * @param {Object} data - The metadata computed by the gesture being emitted.\n * @param {Array} events - An array of ZingEvents\n *  corresponding to the inputs on the screen.\n */\nfunction dispatcher(binding, data, events) {\n  data.events = events;\n\n  const newEvent = new CustomEvent(binding.gesture.getId(), {\n    detail: data,\n    bubbles: true,\n    cancelable: true,\n  });\n  emitEvent(binding.element, newEvent, binding);\n}\n\n/**\n * Emits the new event. Unbinds the event if the event was registered\n * at bindOnce.\n * @param {Element} target - Element object to emit the event to.\n * @param {Event} event - The CustomEvent to emit.\n * @param {Binding} binding - An object of type Binding\n */\nfunction emitEvent(target, event, binding) {\n  target.dispatchEvent(event);\n  if (binding.bindOnce) {\n    ZingTouch.unbind(binding.element, binding.gesture.getType());\n  }\n}\n\nexport default dispatcher;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/dispatcher.js","/**\n * @file interpreter.js\n * Contains logic for the interpreter\n */\n\nimport util from './util.js';\n\n/**\n * Receives an event and an array of Bindings (element -> gesture handler)\n * to determine what event will be emitted. Called from the arbiter.\n * @param {Array} bindings - An array containing Binding objects\n * that associate the element to an event handler.\n * @param {Object} event - The event emitted from the window.\n * @param {Object} state - The state object of the current listener.\n * @return {Object | null} - Returns an object containing a binding and\n * metadata, or null if a gesture will not be emitted.\n */\nfunction interpreter(bindings, event, state) {\n  const evType = util.normalizeEvent(event.type);\n  const candidates = [];\n  bindings.forEach((binding) => {\n    let result = binding.gesture[evType](state.inputs, state, binding.element);\n    if (result) {\n      const events = [];\n      state.inputs.forEach((input) => {\n        events.push(input.current);\n      });\n\n      candidates.push({\n        binding: binding,\n        data: result,\n        events: events,\n      });\n    }\n  });\n\n  return candidates;\n}\n\nexport default interpreter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/interpreter.js","/**\n * @file util.js\n * Various accessor and mutator functions to handle state and validation.\n */\n\nconst CIRCLE_DEGREES = 360;\nconst HALF_CIRCLE_DEGREES = 180;\n\n/**\n *  Contains generic helper functions\n * @type {Object}\n * @namespace util\n */\nlet util = {\n\n  /**\n   * Normalizes window events to be either of type start, move, or end.\n   * @param {String} type - The event type emitted by the browser\n   * @return {null|String} - The normalized event, or null if it is an\n   * event not predetermined.\n   */\n  normalizeEvent(type) {\n    switch (type) {\n      case 'mousedown' :\n      case 'touchstart' :\n      case 'pointerdown' :\n        return 'start';\n      case 'mousemove' :\n      case 'touchmove' :\n      case 'pointermove' :\n        return 'move';\n      case 'mouseup' :\n      case 'touchend' :\n      case 'pointerup' :\n        return 'end';\n      default :\n        return null;\n    }\n  },\n  /* normalizeEvent*/\n\n  /**\n   * Determines if the current and previous coordinates are within or\n   * up to a certain tolerance.\n   * @param {Number} currentX - Current event's x coordinate\n   * @param {Number} currentY - Current event's y coordinate\n   * @param {Number} previousX - Previous event's x coordinate\n   * @param {Number} previousY - Previous event's y coordinate\n   * @param {Number} tolerance - The tolerance in pixel value.\n   * @return {boolean} - true if the current coordinates are\n   * within the tolerance, false otherwise\n   */\n  isWithin(currentX, currentY, previousX, previousY, tolerance) {\n    return ((Math.abs(currentY - previousY) <= tolerance) &&\n    (Math.abs(currentX - previousX) <= tolerance));\n  },\n  /* isWithin*/\n\n  /**\n   * Calculates the distance between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {number} The numerical value between two points\n   */\n  distanceBetweenTwoPoints(x0, x1, y0, y1) {\n    let dist = (Math.sqrt(((x1 - x0) * (x1 - x0)) + ((y1 - y0) * (y1 - y0))));\n    return Math.round(dist * 100) / 100;\n  },\n\n  /**\n   * Calculates the midpoint coordinates between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {Object} The coordinates of the midpoint.\n   */\n  getMidpoint(x0, x1, y0, y1) {\n    return {\n      x: ((x0 + x1) / 2),\n      y: ((y0 + y1) / 2),\n    };\n  },\n  /**\n   * Calculates the angle between the projection and an origin point.\n   *   |                (projectionX,projectionY)\n   *   |             /°\n   *   |          /\n   *   |       /\n   *   |    / θ\n   *   | /__________\n   *   ° (originX, originY)\n   * @param {number} originX\n   * @param {number} originY\n   * @param {number} projectionX\n   * @param {number} projectionY\n   * @return {number} - Degree along the unit circle where the project lies\n   */\n  getAngle(originX, originY, projectionX, projectionY) {\n    let angle = Math.atan2(projectionY - originY, projectionX - originX) *\n      ((HALF_CIRCLE_DEGREES) / Math.PI);\n    return CIRCLE_DEGREES - ((angle < 0) ? (CIRCLE_DEGREES + angle) : angle);\n  },\n  /**\n   * Calculates the angular distance in degrees between two angles\n   *  along the unit circle\n   * @param {number} start - The starting point in degrees\n   * @param {number} end - The ending point in degrees\n   * @return {number} The number of degrees between the\n   * starting point and ending point. Negative degrees denote a clockwise\n   * direction, and positive a counter-clockwise direction.\n   */\n  getAngularDistance(start, end) {\n    let angle = (end - start) % CIRCLE_DEGREES;\n    let sign = (angle < 0) ? 1 : -1;\n    angle = Math.abs(angle);\n    return (angle > HALF_CIRCLE_DEGREES) ?\n    sign * (CIRCLE_DEGREES - angle) : sign * angle;\n  },\n\n  /**\n   * Calculates the velocity of pixel/milliseconds between two points\n   * @param {Number} startX\n   * @param {Number} startY\n   * @param {Number} startTime\n   * @param {Number} endX\n   * @param {Number} endY\n   * @param {Number} endTime\n   * @return {Number} velocity of px/time\n   */\n  getVelocity(startX, startY, startTime, endX, endY, endTime) {\n    let distance = this.distanceBetweenTwoPoints(startX, endX, startY, endY);\n    return (distance / (endTime - startTime));\n  },\n\n  /**\n   * Returns the farthest right input\n   * @param {Array} inputs\n   * @return {Object}\n   */\n  getRightMostInput(inputs) {\n    let rightMost = null;\n    let distance = Number.MIN_VALUE;\n    inputs.forEach((input) => {\n      if (input.initial.x > distance) {\n        rightMost = input;\n      }\n    });\n    return rightMost;\n  },\n\n  /**\n   * Determines is the value is an integer and not a floating point\n   * @param {Mixed} value\n   * @return {boolean}\n   */\n  isInteger(value) {\n    return (typeof value === 'number') && (value % 1 === 0);\n  },\n\n  /**\n   * Determines if the x,y position of the input is within then target.\n   * @param {Number} x -clientX\n   * @param {Number} y -clientY\n   * @param {Element} target\n   * @return {Boolean}\n   */\n  isInside(x, y, target) {\n    const rect = target.getBoundingClientRect();\n    return ((x > rect.left && x < rect.left + rect.width) &&\n    (y > rect.top && y < rect.top + rect.height));\n  },\n  /**\n   * Polyfill for event.propagationPath\n   * @param {Event} event\n   * @return {Array}\n   */\n  getPropagationPath(event) {\n    if (event.path) {\n      return event.path;\n    } else {\n      let path = [];\n      let node = event.target;\n      while (node != document) {\n        path.push(node);\n        node = node.parentNode;\n      }\n\n      return path;\n    }\n  },\n\n  /**\n   * Retrieve the index inside the path array\n   * @param {Array} path\n   * @param {Element} element\n   * @return {Element}\n   */\n  getPathIndex(path, element) {\n    let index = path.length;\n\n    path.forEach((obj) => {\n      if (obj === element) {\n        index = i;\n      }\n    });\n\n    return index;\n  },\n\n  setMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = 'none';\n    element.style['touch-action'] = 'none';\n  },\n\n  removeMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = '';\n    element.style['touch-action'] = '';\n  },\n};\nexport default util;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util.js","/**\n * @file State.js\n */\n\nimport Gesture from './../../gestures/Gesture.js';\nimport Expand from './../../gestures/Expand.js';\nimport Pan from './../../gestures/Pan.js';\nimport Pinch from './../../gestures/Pinch.js';\nimport Rotate from './../../gestures/Rotate.js';\nimport Swipe from './../../gestures/Swipe.js';\nimport Tap from './../../gestures/Tap.js';\nimport Binding from './Binding.js';\nimport Input from './Input.js';\nimport util from './../util.js';\n\nconst DEFAULT_MOUSE_ID = 0;\n\n/**\n * Creates an object related to a Region's state,\n * and contains helper methods to update and clean up different states.\n */\nclass State {\n\n  /**\n   * Constructor for the State class.\n   * @param {String} regionId - The id the region this state is bound to.\n   */\n  constructor(regionId) {\n    /**\n     * The id for the region this state is bound to.\n     * @type {String}\n     */\n    this.regionId = regionId;\n\n    /**\n     * An array of current and recently inactive\n     *  Input objects related to a gesture.\n     * @type {Input}\n     */\n    this.inputs = [];\n\n    /**\n     * An array of Binding objects; The list of relations between elements,\n     *   their gestures, and the handlers.\n     * @type {Binding}\n     */\n    this.bindings = [];\n\n    /**\n     * The number of gestures that have been registered with this state\n     * @type {Number}\n     */\n    this.numGestures = 0;\n\n    /**\n     * A key/value map all the registered gestures for the listener.\n     *  Note: Can only have one gesture registered to one key.\n     * @type {Object}\n     */\n    this.registeredGestures = {};\n\n    this.registerGesture(new Expand(), 'expand');\n    this.registerGesture(new Pan(), 'pan');\n    this.registerGesture(new Rotate(), 'rotate');\n    this.registerGesture(new Pinch(), 'pinch');\n    this.registerGesture(new Swipe(), 'swipe');\n    this.registerGesture(new Tap(), 'tap');\n  }\n\n  /**\n   * Creates a new binding with the given element and gesture object.\n   * If the gesture object provided is unregistered, it's reference\n   * will be saved in as a binding to be later referenced.\n   * @param  {Element} element - The element the gesture is bound to.\n   * @param {String|Object} gesture  - Either a name of a registered gesture,\n   *  or an unregistered  Gesture object.\n   * @param {Function} handler - The function handler to be called\n   *  when the event is emitted. Used to bind/unbind.\n   * @param {Boolean} capture - Whether the gesture is to be\n   *  detected in the capture of bubble phase. Used to bind/unbind.\n   * @param {Boolean} bindOnce - Option to bind once and\n   *  only emit the event once.\n   */\n  addBinding(element, gesture, handler, capture, bindOnce) {\n    let boundGesture;\n\n    // Error type checking.\n    if (element && typeof element.tagName === 'undefined') {\n      throw new Error('Parameter element is an invalid object.');\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('Parameter handler is invalid.');\n    }\n\n    if (typeof gesture === 'string' &&\n      Object.keys(this.registeredGestures).indexOf(gesture) === -1) {\n      throw new Error('Parameter ' + gesture + ' is not a registered gesture');\n    } else if (typeof gesture === 'object' && !(gesture instanceof Gesture)) {\n      throw new Error('Parameter for the gesture is not of a Gesture type');\n    }\n\n    if (typeof gesture === 'string') {\n      boundGesture = this.registeredGestures[gesture];\n    } else {\n      boundGesture = gesture;\n      if (boundGesture.id === '') {\n        this.assignGestureId(boundGesture);\n      }\n    }\n\n    this.bindings.push(new Binding(element, boundGesture,\n      handler, capture, bindOnce));\n    element.addEventListener(boundGesture.getId(), handler, capture);\n  }\n\n  /**\n   * Retrieves the Binding by which an element is associated to.\n   * @param {Element} element - The element to find bindings to.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByElement(element) {\n    let matches = [];\n    this.bindings.map((binding) => {\n      if (binding.element === element) {\n        matches.push(binding);\n      }\n    });\n    return matches;\n  }\n\n  /**\n   * Retrieves all bindings based upon the initial X/Y position of the inputs.\n   * e.g. if gesture started on the correct target element,\n   *  but diverted away into the correct region, this would still be valid.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByInitialPos() {\n    let matches = [];\n    this.bindings.forEach((binding) => {\n      // Determine if at least one input is in the target element.\n      // They should all be in the region based upon a prior check\n      let inputsInside = this.inputs.filter((input) => {\n        return util.isInside(input.initial.x, input.initial.y, binding.element);\n      });\n      if (inputsInside.length > 0) {\n        matches.push(binding);\n      }\n    });\n    return matches;\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   * @param {Event} event - The event being captured.\n   * @param {Element} regionElement - The element where\n   *  this current Region is bound to.\n   * @return {boolean} - returns true for a successful update,\n   *  false if the event is invalid.\n   */\n  updateInputs(event, regionElement) {\n    let identifier = DEFAULT_MOUSE_ID;\n    let eventType = (event.touches) ?\n      'TouchEvent' : (event.pointerType) ? 'PointerEvent' : 'MouseEvent';\n\n    switch (eventType) {\n      case 'TouchEvent':\n        // Return if all gestures did not originate from the same target\n        if (event.touches.length !== event.targetTouches.length) {\n          return false;\n        }\n\n        for (let index in event.changedTouches) {\n          if (event.changedTouches.hasOwnProperty(index) &&\n            util.isInteger((parseInt(index)))) {\n            identifier = event.changedTouches[index].identifier;\n            update(event, this, identifier, regionElement);\n          }\n        }\n        break;\n\n      case 'PointerEvent':\n        identifier = event.pointerId;\n        update(event, this, identifier, regionElement);\n        break;\n\n      case 'MouseEvent':\n      default:\n        update(event, this, DEFAULT_MOUSE_ID, regionElement);\n        break;\n    }\n    return true;\n\n    function update(event, state, identifier, regionElement) {\n      let eventType = util.normalizeEvent(event.type);\n      let input = findInputById(state.inputs, identifier);\n\n      // A starting input was not cleaned up properly and still exists.\n      if (eventType === 'start' && input) {\n        state.resetInputs();\n        return;\n      }\n\n      // An input has moved outside the region.\n      if (eventType !== 'start' &&\n        input &&\n        !util.isInside(input.current.x, input.current.y, regionElement)) {\n         state.resetInputs();\n        return;\n      }\n\n      if (eventType !== 'start' && !input) {\n        state.resetInputs();\n        return;\n      }\n\n      if (eventType === 'start') {\n        state.inputs.push(new Input(event, identifier));\n      } else {\n        input.update(event, identifier);\n      }\n    }\n  }\n\n  /**\n   * Removes all inputs from the state, allowing for a new gesture.\n   */\n  resetInputs() {\n    this.inputs = [];\n  }\n\n  /**\n   * Counts the number of active inputs at any given time.\n   * @return {Number} - The number of active inputs.\n   */\n  numActiveInputs() {\n    let endType = this.inputs.filter((input) => {\n      return input.current.type !== 'end';\n    });\n    return endType.length;\n  }\n\n  /**\n   * Register the gesture to the current region.\n   * @param {Object} gesture - The gesture to register\n   * @param {String} key - The key to define the new gesture as.\n   */\n  registerGesture(gesture, key) {\n    this.assignGestureId(gesture);\n    this.registeredGestures[key] = gesture;\n  }\n\n  /**\n   * Tracks the gesture to this state object to become uniquely identifiable.\n   * Useful for nested Regions.\n   * @param {Gesture} gesture - The gesture to track\n   */\n  assignGestureId(gesture) {\n    gesture.setId(this.regionId + '-' + this.numGestures++);\n  }\n\n}\n/**\n * Searches through each input, comparing the browser's identifier key\n *  for touches, to the stored one in each input\n * @param {Array} inputs - The array of inputs in state.\n * @param {String} identifier - The identifier the browser has assigned.\n * @return {Input} - The input object with the corresponding identifier,\n *  null if it did not find any.\n */\nfunction findInputById(inputs, identifier) {\n  for (let i = 0; i < inputs.length; i++) {\n    if (inputs[i].identifier === identifier) {\n      return inputs[i];\n    }\n  }\n\n  return null;\n}\n\nexport default State;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/State.js","/**\n * @file Expand.js\n * Contains the Expand class\n */\n\nimport Distance from './Distance.js';\n\n/**\n * An Expand is defined as two inputs moving farther away from each other.\n * This gesture does not account for any start/end events to allow for the\n * event to interact with the Pan and Pinch events.\n * @class Expand\n */\nclass Expand extends Distance {\n\n  /**\n   * Constructor function for the Expand class.\n   * @param {object} options\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'expand';\n  }\n\n}\n\nexport default Expand;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Expand.js","/**\n * @file Distance.js\n * Contains the abstract Distance class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Distance is defined as two inputs moving either together or apart.\n * @class Distance\n */\nclass Distance extends Gesture {\n  /**\n   * Constructor function for the Distance class.\n   * @param {Object} options\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'distance';\n\n    /**\n     * The minimum amount in pixels the inputs must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Initialized the lastEmitted\n   * gesture and stores it in the first input for reference events.\n   * @param {Array} inputs\n   */\n  start(inputs) {\n    if (inputs.length === DEFAULT_INPUTS) {\n      // Store the progress in the first input.\n      let progress = inputs[0].getGestureProgress(this.type);\n      progress.lastEmittedDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n    }\n  }\n\n  /**\n   * Event hook for the move of a gesture.\n   *  Determines if the two points are moved in the expected direction relative\n   *  to the current distance and the last distance.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object | null} - Returns the distance in pixels between two inputs\n   */\n  move(inputs, state, element) {\n    if (state.numActiveInputs() === DEFAULT_INPUTS) {\n      let currentDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n      let lastDistance = util.distanceBetweenTwoPoints(\n        inputs[0].previous.x,\n        inputs[1].previous.x,\n        inputs[0].previous.y,\n        inputs[1].previous.y);\n\n      // Retrieve the first input's progress.\n      let progress = inputs[0].getGestureProgress(this.type);\n\n      if (this.type === 'expand') {\n        if (currentDistance < lastDistance) {\n          progress.lastEmittedDistance = currentDistance;\n        } else if ((currentDistance - progress.lastEmittedDistance >=\n          this.threshold)) {\n          progress.lastEmittedDistance = currentDistance;\n          return {\n            distance: currentDistance,\n          };\n        }\n      } else {\n        if (currentDistance > lastDistance) {\n          progress.lastEmittedDistance = currentDistance;\n        } else if (currentDistance < lastDistance &&\n          (progress.lastEmittedDistance - currentDistance >= this.threshold)) {\n          progress.lastEmittedDistance = currentDistance;\n          return {\n            distance: currentDistance,\n          };\n        }\n      }\n\n      return null;\n    }\n  }\n}\n\nexport default Distance;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Distance.js","/**\n * @file Pan.js\n * Contains the Pan class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Pan is defined as a normal movement in any direction on a screen.\n * Pan gestures do not track start events and can interact with pinch and \\\n *  expand gestures.\n * @class Pan\n */\nclass Pan extends Gesture {\n  /**\n   * Constructor function for the Pan class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs=1] - Number of inputs for the\n   *  Pan gesture.\n   * @param {Number} [options.threshold=1] - The minimum number of\n   * pixels the input has to move to trigger this gesture.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'pan';\n\n    /**\n     * The number of inputs to trigger a Pan can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The minimum amount in pixels the pan must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Marks each input as active,\n   * so it can invalidate any end events.\n   * @param {Array} inputs\n   */\n  start(inputs) {\n    inputs.forEach((input) => {\n      let progress = input.getGestureProgress(this.getId());\n      progress.active = true;\n      progress.lastEmitted = {\n        x: input.current.x,\n        y: input.current.y,\n      };\n    });\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture.\n   * Fired whenever the input length is met, and keeps a boolean flag that\n   * the gesture has fired at least once.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object} - Returns the distance in pixels between the two inputs.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs === inputs.length) {\n      var output = {\n        data: [],\n      };\n      for (let i = 0; i < inputs.length; i++) {\n        let progress = inputs[i].getGestureProgress(this.getId());\n\n        let reachedThreshold = false;\n\n        // Check threshold distance\n        const yThreshold = Math.abs(inputs[i].current.y -\n            progress.lastEmitted.y) > this.threshold;\n        const xThreshold = Math.abs(inputs[i].current.x -\n            progress.lastEmitted.x) > this.threshold;\n        reachedThreshold = yThreshold || xThreshold;\n\n        if (progress.active && reachedThreshold) {\n          output.data[i] = {\n            distanceFromOrigin: util.distanceBetweenTwoPoints(\n              inputs[i].initial.x,\n              inputs[i].current.x,\n              inputs[i].initial.y,\n              inputs[i].current.y),\n            directionFromOrigin: util.getAngle(\n              inputs[i].initial.x,\n              inputs[i].initial.y,\n              inputs[i].current.x,\n              inputs[i].current.y),\n            currentDirection: util.getAngle(\n              progress.lastEmitted.x,\n              progress.lastEmitted.y,\n              inputs[i].current.x,\n              inputs[i].current.y),\n          };\n          progress.lastEmitted.x = inputs[i].current.x;\n          progress.lastEmitted.y = inputs[i].current.y;\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  /* move*/\n\n  /**\n   * end() - Event hook for the end of a gesture. If the gesture has at least\n   * fired once, then it ends on the first end event such that any remaining\n   * inputs will not trigger the event until all inputs have reached the\n   * touchend event. Any touchend->touchstart events that occur before all\n   * inputs are fully off the screen should not fire.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    inputs.forEach((input) => {\n      let progress = input.getGestureProgress(this.getId());\n      progress.active = false;\n    });\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Pan;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Pan.js","/**\n * @file Pinch.js\n * Contains the Pinch class\n */\n\nimport Distance from './Distance.js';\nimport util from './../core/util.js';\n\n/**\n * An Pinch is defined as two inputs moving closer to each other.\n * This gesture does not account for any start/end events to allow for the event\n * to interact with the Pan and Pinch events.\n * @class Pinch\n */\nclass Pinch extends Distance {\n  /**\n   * Constructor function for the Pinch class.\n   * @param {Object} options\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'pinch';\n  }\n\n}\n\nexport default Pinch;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Pinch.js","/**\n * @file Rotate.js\n * Contains the Rotate class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst MAX_INPUTS = 2;\n\n/**\n * A Rotate is defined as two inputs moving about a circle,\n * maintaining a relatively equal radius.\n * @class Rotate\n */\nclass Rotate extends Gesture {\n  /**\n   * Constructor function for the Rotate class.\n   */\n  constructor() {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'rotate';\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture. Obtains the midpoint of two\n   * the two inputs and calculates the projection of the right most input along\n   * a unit circle to obtain an angle. This angle is compared to the previously\n   * calculated angle to output the change of distance, and is compared to the\n   * initial angle to output the distance from the initial angle to the current\n   * angle.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current listener.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - null if this event did not occur\n   * @return {Object} obj.angle - The current angle along the unit circle\n   * @return {Object} obj.distanceFromOrigin - The angular distance travelled\n   * from the initial right most point.\n   * @return {Object} obj.distanceFromLast - The change of angle between the\n   * last position and the current position.\n   */\n  move(inputs, state, element) {\n    if (state.numActiveInputs() <= MAX_INPUTS) {\n      let referencePivot;\n      let diffX;\n      let diffY;\n      let input;\n      if (state.numActiveInputs() === 1) {\n        let bRect = element.getBoundingClientRect();\n        referencePivot = {\n          x: bRect.left + bRect.width / 2,\n          y: bRect.top + bRect.height / 2,\n        };\n        input = inputs[0];\n        diffX = diffY = 0;\n      } else {\n        referencePivot = util.getMidpoint(\n          inputs[0].initial.x,\n          inputs[1].initial.x,\n          inputs[0].initial.y,\n          inputs[1].initial.y);\n        let currentPivot = util.getMidpoint(\n          inputs[0].current.x,\n          inputs[1].current.x,\n          inputs[0].current.y,\n          inputs[1].current.y);\n        diffX = referencePivot.x - currentPivot.x;\n        diffY = referencePivot.y - currentPivot.y;\n        input = util.getRightMostInput(inputs);\n      }\n\n      // Translate the current pivot point.\n      let currentAngle = util.getAngle(referencePivot.x, referencePivot.y,\n        input.current.x + diffX, input.current.y + diffY);\n\n      let progress = input.getGestureProgress(this.getId());\n      if (!progress.initialAngle) {\n        progress.initialAngle = progress.previousAngle = currentAngle;\n        progress.distance = progress.change = 0;\n      } else {\n        progress.change = util.getAngularDistance(\n          progress.previousAngle,\n          currentAngle);\n        progress.distance = progress.distance + progress.change;\n      }\n\n      progress.previousAngle = currentAngle;\n\n      return {\n        angle: currentAngle,\n        distanceFromOrigin: progress.distance,\n        distanceFromLast: progress.change,\n      };\n    }\n\n    return null;\n  }\n\n  /* move*/\n}\n\nexport default Rotate;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Rotate.js","/**\n * @file Swipe.js\n * Contains the Swipe class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MAX_REST_TIME = 100;\nconst DEFAULT_ESCAPE_VELOCITY = 0.2;\nconst DEFAULT_TIME_DISTORTION = 100;\nconst DEFAULT_MAX_PROGRESS_STACK = 10;\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n * @class Swipe\n */\nclass Swipe extends Gesture {\n\n  /**\n   * Constructor function for the Swipe class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs] - The number of inputs to trigger a\n   * Swipe can be variable, and the maximum number being a factor of the browser\n   *  move and current move events.\n   * @param {Number} [options.maxRestTime] - The maximum resting time a point\n   *  has between it's last\n   * @param {Number} [options.escapeVelocity] - The minimum velocity the input\n   *  has to be at to emit a swipe.\n   * @param {Number} [options.timeDistortion] - (EXPERIMENTAL) A value of time\n   *  in milliseconds to distort between events.\n   * @param {Number} [options.maxProgressStack] - (EXPERIMENTAL)The maximum\n   *  amount of move events to keep\n   * track of for a swipe.\n   */\n  constructor(options) {\n    super();\n    /**\n     * The type of the Gesture\n     * @type {String}\n     */\n    this.type = 'swipe';\n\n    /**\n     * The number of inputs to trigger a Swipe can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The maximum resting time a point has between it's last move and\n     * current move events.\n     * @type {Number}\n     */\n    this.maxRestTime = (options && options.maxRestTime) ?\n      options.maxRestTime : DEFAULT_MAX_REST_TIME;\n\n    /**\n     * The minimum velocity the input has to be at to emit a swipe.\n     * This is useful for determining the difference between\n     * a swipe and a pan gesture.\n     * @type {number}\n     */\n    this.escapeVelocity = (options && options.escapeVelocity) ?\n      options.escapeVelocity : DEFAULT_ESCAPE_VELOCITY;\n\n    /**\n     * (EXPERIMENTAL) A value of time in milliseconds to distort between events.\n     * Browsers do not accurately measure time with the Date constructor in\n     * milliseconds, so consecutive events sometimes display the same timestamp\n     * but different x/y coordinates. This will distort a previous time\n     * in such cases by the timeDistortion's value.\n     * @type {number}\n     */\n    this.timeDistortion = (options && options.timeDistortion) ?\n      options.timeDistortion : DEFAULT_TIME_DISTORTION;\n\n    /**\n     * (EXPERIMENTAL) The maximum amount of move events to keep track of for a\n     * swipe. This helps give a more accurate estimate of the user's velocity.\n     * @type {number}\n     */\n    this.maxProgressStack = (options && options.maxProgressStack) ?\n      options.maxProgressStack : DEFAULT_MAX_PROGRESS_STACK;\n  }\n\n  /**\n   * Event hook for the move of a gesture. Captures an input's x/y coordinates\n   * and the time of it's event on a stack.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Swipe does not emit from a move.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs === inputs.length) {\n      for (let i = 0; i < inputs.length; i++) {\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (!progress.moves) {\n          progress.moves = [];\n        }\n\n        progress.moves.push({\n          time: new Date().getTime(),\n          x: inputs[i].current.x,\n          y: inputs[i].current.y,\n        });\n\n        if (progress.length > this.maxProgressStack) {\n          progress.moves.shift();\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Determines if the input's history validates a swipe motion.\n   * Determines if it did not come to a complete stop (maxRestTime), and if it\n   * had enough of a velocity to be considered (ESCAPE_VELOCITY).\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    if (this.numInputs === inputs.length) {\n      let output = {\n        data: [],\n      };\n\n      for (var i = 0; i < inputs.length; i++) {\n        // Determine if all input events are on the 'end' event.\n        if (inputs[i].current.type !== 'end') {\n          return;\n        }\n\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (progress.moves && progress.moves.length > 2) {\n          // CHECK : Return if the input has not moved in maxRestTime ms.\n\n          let currentMove = progress.moves.pop();\n          if ((new Date().getTime()) - currentMove.time > this.maxRestTime) {\n            return null;\n          }\n\n          let lastMove;\n          let index = progress.moves.length - 1;\n\n          /* Date is unreliable, so we retrieve the last move event where\n           the time is not the same. */\n          while (index !== -1) {\n            if (progress.moves[index].time !== currentMove.time) {\n              lastMove = progress.moves[index];\n              break;\n            }\n\n            index--;\n          }\n\n          /* If the date is REALLY unreliable, we apply a time distortion\n           to the last event.\n           */\n          if (!lastMove) {\n            lastMove = progress.moves.pop();\n            lastMove.time += this.timeDistortion;\n          }\n\n          var velocity = util.getVelocity(lastMove.x, lastMove.y, lastMove.time,\n            currentMove.x, currentMove.y, currentMove.time);\n\n          output.data[i] = {\n            velocity: velocity,\n            currentDirection: util.getAngle(\n              lastMove.x,\n              lastMove.y,\n              currentMove.x,\n              currentMove.y),\n          };\n        }\n      }\n\n      for (var i = 0; i < output.data.length; i++) {\n        if (velocity < this.escapeVelocity) {\n          return null;\n        }\n      }\n\n      if (output.data.length > 0) {\n        return output;\n      }\n    }\n\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Swipe;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Swipe.js","/**\n * @file Tap.js\n * Contains the Tap class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_MIN_DELAY_MS = 0;\nconst DEFAULT_MAX_DELAY_MS = 300;\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MOVE_PX_TOLERANCE = 10;\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n * @class Tap\n */\nclass Tap extends Gesture {\n  /**\n   * Constructor function for the Tap class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.minDelay=0] - The minimum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.maxDelay=300] - The maximum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.numInputs=1] - Number of inputs for Tap gesture.\n   * @param {Number} [options.tolerance=10] - The tolerance in pixels\n   *  a user can move.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'tap';\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.minDelay = (options && options.minDelay) ?\n      options.minDelay : DEFAULT_MIN_DELAY_MS;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.maxDelay = (options && options.maxDelay) ?\n      options.maxDelay : DEFAULT_MAX_DELAY_MS;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     * @type {number}\n     */\n    this.tolerance = (options && options.tolerance) ?\n      options.tolerance : DEFAULT_MOVE_PX_TOLERANCE;\n  }\n\n  /* constructor*/\n\n  /**\n   * Event hook for the start of a gesture. Keeps track of when the inputs\n   * trigger the start event.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null} - Tap does not trigger on a start event.\n   */\n  start(inputs) {\n    if (inputs.length === this.numInputs) {\n      inputs.forEach((input) => {\n        let progress = input.getGestureProgress(this.type);\n        progress.start = new Date().getTime();\n      });\n    }\n\n    return null;\n  }\n\n  /* start*/\n\n  /**\n   * Event hook for the move of a gesture. The Tap event reaches here if the\n   * user starts to move their input before an 'end' event is reached.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Tap does not trigger on a move event.\n   */\n  move(inputs, state, element) {\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() === 'move') {\n        let current = inputs[i].current;\n        let previous = inputs[i].previous;\n        if (!util.isWithin(\n            current.x,\n            current.y,\n            previous.x,\n            previous.y,\n            this.tolerance)) {\n          let type = this.type;\n          inputs.forEach(function(input) {\n            input.resetProgress(type);\n          });\n\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Event hook for the end of a gesture.\n   * Determines if this the tap event can be fired if the delay and tolerance\n   * constraints are met. Also waits for all of the inputs to be off the screen\n   * before determining if the gesture is triggered.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   * Object with information otherwise. Returns the interval time between start\n   * and end events.\n   */\n  end(inputs) {\n    if (inputs.length !== this.numInputs) {\n      return null;\n    }\n\n    let startTime = Number.MAX_VALUE;\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() !== 'end') {\n        return null;\n      }\n\n      let progress = inputs[i].getGestureProgress(this.type);\n      if (!progress.start) {\n        return null;\n      }\n\n      // Find the most recent input's startTime\n      if (progress.start < startTime) {\n        startTime = progress.start;\n      }\n    }\n\n    let interval = new Date().getTime() - startTime;\n    if ((this.minDelay <= interval) && (this.maxDelay >= interval)) {\n      return {\n        interval: interval,\n      };\n    } else {\n      let type = this.type;\n      inputs.forEach(function(input) {\n        input.resetProgress(type);\n      });\n\n      return null;\n    }\n  }\n\n  /* end*/\n}\n\nexport default Tap;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gestures/Tap.js","/**\n * @file Binding.js\n */\n\n/**\n * Responsible for creating a binding between an element and a gesture.\n * @class Binding\n */\nclass Binding {\n  /**\n   * Constructor function for the Binding class.\n   * @param {Element} element - The element to associate the gesture to.\n   * @param {Gesture} gesture - A instance of the Gesture type.\n   * @param {Function} handler - The function handler to execute when a\n   * gesture is recognized\n   * on the associated element.\n   * @param {Boolean} [capture=false] - A boolean signifying if the event is\n   * to be emitted during\n   * the capture or bubble phase.\n   * @param {Boolean} [bindOnce=false] - A boolean flag\n   * used for the bindOnce syntax.\n   */\n  constructor(element, gesture, handler, capture, bindOnce) {\n    /**\n     * The element to associate the gesture to.\n     * @type {Element}\n     */\n    this.element = element;\n    /**\n     * A instance of the Gesture type.\n     * @type {Gesture}\n     */\n    this.gesture = gesture;\n    /**\n     * The function handler to execute when a gesture is\n     * recognized on the associated element.\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * A boolean signifying if the event is to be\n     * emitted during the capture or bubble phase.\n     * @type {Boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * A boolean flag used for the bindOnce syntax.\n     * @type {Boolean}\n     */\n    this.bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n  }\n\n}\n\nexport default Binding;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Binding.js","/**\n * @file Input.js\n */\n\nimport ZingEvent from './ZingEvent.js';\n\n/**\n * Tracks a single input and contains information about the\n * current, previous, and initial events.\n * Contains the progress of each Input and it's associated gestures.\n * @class Input\n */\nclass Input {\n\n  /**\n   * Constructor function for the Input class.\n   * @param {Event} event - The Event object from the window\n   * @param {Number} [identifier=0] - The identifier for each input event\n   * (taken from event.changedTouches)\n   */\n  constructor(event, identifier) {\n    let currentEvent = new ZingEvent(event, identifier);\n\n    /**\n     * Holds the initial event object. A touchstart/mousedown event.\n     * @type {ZingEvent}\n     */\n    this.initial = currentEvent;\n\n    /**\n     * Holds the most current event for this Input, disregarding any other past,\n     * current, and future events that other Inputs participate in.\n     * e.g. This event ended in an 'end' event, but another Input is still\n     * participating in events -- this will not be updated in such cases.\n     * @type {ZingEvent}\n     */\n    this.current = currentEvent;\n\n    /**\n     * Holds the previous event that took place.\n     * @type {ZingEvent}\n     */\n    this.previous = currentEvent;\n\n    /**\n     * Refers to the event.touches index, or 0 if a simple mouse event occurred.\n     * @type {Number}\n     */\n    this.identifier = (typeof identifier !== 'undefined') ? identifier : 0;\n\n    /**\n     * Stores internal state between events for\n     * each gesture based off of the gesture's id.\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n\n  /**\n   * Receives an input, updates the internal state of what the input has done.\n   * @param {Event} event - The event object to wrap with a ZingEvent.\n   * @param {Number} touchIdentifier - The index of inputs, from event.touches\n   */\n  update(event, touchIdentifier) {\n    this.previous = this.current;\n    this.current = new ZingEvent(event, touchIdentifier);\n  }\n\n  /**\n   * Returns the progress of the specified gesture.\n   * @param {String} id - The identifier for each unique Gesture's progress.\n   * @return {Object} - The progress of the gesture.\n   * Creates an empty object if no progress has begun.\n   */\n  getGestureProgress(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n    return this.progress[id];\n  }\n\n  /**\n   * Returns the normalized current Event's type.\n   * @return {String} The current event's type ( start | move | end )\n   */\n  getCurrentEventType() {\n    return this.current.type;\n  }\n\n  /**\n   * Resets a progress/state object of the specified gesture.\n   * @param {String} id - The identifier of the specified gesture\n   */\n  resetProgress(id) {\n    this.progress[id] = {};\n  }\n\n}\n\nexport default Input;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/Input.js","/**\n * @file ZingEvent.js\n * Contains logic for ZingEvents\n */\n\nimport util from '../util.js';\n\nconst INITIAL_COORDINATE = 0;\n/**\n * An event wrapper that normalizes events across browsers and input devices\n * @class ZingEvent\n */\nclass ZingEvent {\n  /**\n   * @constructor\n   * @param {Event} event - The event object being wrapped.\n   * @param {Array} event.touches - The number of touches on\n   *  a screen (mobile only).\n   * @param {Object} event.changedTouches - The TouchList representing\n   * points that participated in the event.\n   * @param {Number} touchIdentifier - The index of touch if applicable\n   */\n  constructor(event, touchIdentifier) {\n    /**\n     * The original event object.\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type of event or null if it is an event not predetermined.\n     * @see util.normalizeEvent\n     * @type {String | null}\n     */\n    this.type = util.normalizeEvent(event.type);\n\n    /**\n     * The X coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.x = INITIAL_COORDINATE;\n\n    /**\n     * The Y coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.y = INITIAL_COORDINATE;\n\n    let eventObj;\n    if (event.touches && event.changedTouches) {\n      for (let i = 0; i < event.changedTouches.length; i++) {\n        if (event.changedTouches[i].identifier === touchIdentifier) {\n          eventObj = event.changedTouches[i];\n          break;\n        }\n      }\n    } else {\n      eventObj = event;\n    }\n\n    this.x = this.clientX = eventObj.clientX;\n    this.y = this.clientY = eventObj.clientY;\n\n    this.pageX = eventObj.pageX;\n    this.pageY = eventObj.pageY;\n\n    this.screenX = eventObj.screenX;\n    this.screenY = eventObj.screenY;\n  }\n}\n\nexport default ZingEvent;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/classes/ZingEvent.js"],"sourceRoot":""}